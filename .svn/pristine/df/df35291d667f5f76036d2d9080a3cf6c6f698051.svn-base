package com.renpin.renpincustomer;

import com.renpin.domin.TaskIcon;
import com.renpin.renpincustomer.AboutDialog.PriorityListener;
import com.renpin.service.GoodService;
import com.renpin.service.Impl.GoodServiceImpl;
import com.renpin.utils.CommonUtils;

import android.app.Activity;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Bitmap;
import android.graphics.Color;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.Window;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

public class TaskDetailActivity extends Activity {
	ImageView imageview1;// 任务发布者图片
	TextView textview1;// 任务发布者的名称
	TextView textview2;// 任务发布时间
	TextView textview3;// 任务有效时间限制
	TextView textview4;// 任务标题
	TextView textview5;// 任务详细描述
	ImageView imageview2;// 返回图标
	Button button1;// 拿下按钮
	ImageView imageview3;// 评论图标
	TextView textview6;// 评论条数

	// 显示图片控件
	ImageView icon1;
	ImageView icon2;
	ImageView icon3;
	ImageView icon4;
	ImageView icon5;
	ImageView icon6;

	private static CommonUtils mUtils = null;
	// 用来存储用户信息
	SharedPreferences msettings = null;
	// 判断是否继续倒计时
	boolean mbIsContinue = true;
	MyHandler myhandler = null;
	// 定时更新时间的线程对象
	private static Thread mthre = null;
	// 获取任务时间计数的线程对象
	private static Thread mthre1 = null;
	// 计时的剩余时间(秒)
	private static long mnRemainTime;
	// 用来获取服务器上数据的对象
	private GoodService goodService = new GoodServiceImpl();
	// 任务id号
	private String strTaskId;
	// 任务类型
	private String strTaskType;
	// 存储任务图片的对象
	private TaskIcon taskicon;
	// 存放任务发布放大图片
	public static String[] strIcons = new String[6];
	// 判断放大图片是否已经加载到本地了
	private boolean mbIsLoad = false;
	// 发布人名称
	String mstrCustomerNameTemp;
	// 发布人昵称
	String strCustomerNameNick;
	// 执行人昵称
	String strImplementNick;
	// 人品值
	int mnCredit = 0;
	// 赞值
	int mnCharmValue = 0;
	// 显示人品值控件
	TextView credittextview;
	// 显示赞值控件
	TextView charmvaluetextview;
	// 拿下或抢下该任务需要的人品值
	int mnCreditLimit = 1;
	int mnCharmLimit = 0;
	// 当前用户人品值
	int mnCurrentCredit = 0;
	// 当前用户赞值
	int mnCurrentCharmValue = 0;
	//我抢
	LinearLayout myshare;
	//我拿
	LinearLayout mytask;
	

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		requestWindowFeature(Window.FEATURE_NO_TITLE);

		// 程序启动的时候避免光标处在editview中而弹出输入法窗口
		getWindow().setSoftInputMode(
				WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
		setContentView(R.layout.task_detail);

		mbIsLoad = false;

		if (null == mUtils) {
			mUtils = new CommonUtils(this);
		}
		if (null == myhandler) {
			myhandler = new MyHandler();
		}
		msettings = getSharedPreferences("MekeSharedPreferences", 0);

		String strTaskAnnounceTime;// 发布时间
		String strTimeLimit;// 时间限制
		String strTaskTitle;// 任务标题
		String strDetail;// 任务详细内容
		String strRunSeconds;// 任务进行的秒数
		String strImplementName;// 任务执行人

		mstrCustomerNameTemp = (String) getIntent().getStringExtra(
				"com.renpin.RenPinMainActivity.customername");
		strTaskAnnounceTime = (String) getIntent().getStringExtra(
				"com.renpin.RenPinMainActivity.TaskAnnounceTime");
		strTimeLimit = (String) getIntent().getStringExtra(
				"com.renpin.RenPinMainActivity.TimeLimit");
		strTaskTitle = (String) getIntent().getStringExtra(
				"com.renpin.RenPinMainActivity.TaskTitle");
		strDetail = (String) getIntent().getStringExtra(
				"com.renpin.RenPinMainActivity.Detail");
		strRunSeconds = (String) getIntent().getStringExtra(
				"com.renpin.RenPinMainActivity.RunSeconds");
		strTaskId = (String) getIntent().getStringExtra(
				"com.renpin.RenPinMainActivity.TaskId");
		strImplementName = (String) getIntent().getStringExtra(
				"com.renpin.RenPinMainActivity.TaskImplementName");
		strCustomerNameNick = (String) getIntent().getStringExtra(
				"com.renpin.RenPinMainActivity.strCustomerNameNick");
		strImplementNick = msettings.getString("PersonName", "");
		strTaskType = (String) getIntent().getStringExtra(
				"com.renpin.RenPinMainActivity.strTaskType");
		mnCreditLimit = (int) getIntent().getIntExtra(
				"com.renpin.RenPinMainActivity.nCreditValue", 1);
		mnCharmLimit = (int) getIntent().getIntExtra(
				"com.renpin.RenPinMainActivity.nCharmValue", 0);

		InitActivities(mstrCustomerNameTemp, strTaskAnnounceTime, strTimeLimit,
				strTaskTitle, strDetail, strRunSeconds, strImplementName,
				strTaskType);
	}

	private void InitActivities(String strCustomerNameTemp,
			String strTaskAnnounceTime, String strTimeLimit,
			String strTaskTitle, String strDetail, String strRunSeconds,
			String strImplementName, final String strTaskType) {

		imageview1 = (ImageView) findViewById(R.id.task_detail_imageview1);
		textview1 = (TextView) findViewById(R.id.task_detail_textview1);
		textview2 = (TextView) findViewById(R.id.task_detail_textview2);
		textview3 = (TextView) findViewById(R.id.task_detail_textview3);
		textview4 = (TextView) findViewById(R.id.task_detail_textview4);
		textview5 = (TextView) findViewById(R.id.task_detail_textview5);
		imageview2 = (ImageView) findViewById(R.id.customer_login_image1);
		button1 = (Button) findViewById(R.id.task_detail_button1);
		textview6 = (TextView) findViewById(R.id.task_detail_textview6);
		imageview3 = (ImageView) findViewById(R.id.task_detail_imageview2);
		credittextview = (TextView) findViewById(R.id.task_detail_credit);
		charmvaluetextview = (TextView) findViewById(R.id.task_detail_charm);
		mytask = (LinearLayout) findViewById(R.id.taskdetail_mytasklayout);
		myshare = (LinearLayout) findViewById(R.id.taskdetail_mysharelayout);
		
		icon1 = (ImageView) findViewById(R.id.task_detail_icon1);
		icon2 = (ImageView) findViewById(R.id.task_detail_icon2);
		icon3 = (ImageView) findViewById(R.id.task_detail_icon3);
		icon4 = (ImageView) findViewById(R.id.task_detail_icon4);
		icon5 = (ImageView) findViewById(R.id.task_detail_icon5);
		icon6 = (ImageView) findViewById(R.id.task_detail_icon6);

		if (2 == Integer.parseInt(strTaskType)) {
			button1.setText("我抢");
			myshare.setVisibility(View.VISIBLE);
			mytask.setVisibility(View.GONE);
		}else{
			myshare.setVisibility(View.GONE);
			mytask.setVisibility(View.VISIBLE);
		}

		Bitmap bmp = RenPinMainActivity.mAnnounceImage;
		imageview1.setImageBitmap(bmp);
		textview1.setText(strCustomerNameNick);
		textview2.setText(strTaskAnnounceTime);
		// int nLimit = Integer.parseInt(strTimeLimit);
		// int nRunSecond = Integer.parseInt(strRunSeconds);
		// mnRemainTime = nLimit - nRunSecond;
		// 如果剩余时间小于0,那么就默认给值0
		// if (mnRemainTime <= 0) {
		// mnRemainTime = 0;
		// }
		String strAccountName = msettings.getString("TruePersonName", "");
		// 如果该任务已经被别人拿下或者该任务是自己发布的,那么就不能进行拿下操作
		if (strCustomerNameTemp.equals(strAccountName)
				|| !strImplementName.equals("")) {
			button1.setTextColor(Color.rgb(96, 96, 96));
			button1.setEnabled(false);
		}
		mthre1 = new Thread(run2);
		mthre1.start();

		// 启动获取缩略图的线程
		Thread thread = new Thread(run3);
		thread.start();

		// String strTime = mUtils.GetStringBySeconds(mnRemainTime);
		textview3.setText("");
		textview4.setText(strTaskTitle);
		textview5.setText(strDetail);

		imageview2.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				mbIsContinue = false;
				TaskDetailActivity.this.finish();
			}
		});

		button1.setOnClickListener(new OnClickListener() {

			String strAccountName = msettings.getString("TruePersonName", "");
			// 先获取当前用户的人品值和赞值
			Runnable creditandcharm = new Runnable() {
				public void run() {
					if (!strAccountName.equals("")) {
						// 根据人名称获取相应的人品值和赞值
						mnCurrentCredit = goodService
								.GetCreditValue(strAccountName);
						mnCurrentCharmValue = goodService
								.GetCharmValue(strAccountName);
					}
					// 发送消息,启动run1线程
					Message msg = myhandler.obtainMessage();
					msg.what = 6;
					myhandler.sendMessage(msg);
				}
			};

			@Override
			public void onClick(View v) {
				Thread thre = new Thread(creditandcharm);
				thre.start();
			}

		});

		imageview3.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {

			}
		});

		icon1.setOnClickListener(new OnClickListener() {
			Runnable runicon1 = new Runnable() {
				public void run() {
					if (!mbIsLoad) {
						// 获取每张缩小图的放大图片
						strIcons[0] = goodService.GetTaskLargeIcon(strTaskId,
								strTaskType, 1);
						strIcons[1] = goodService.GetTaskLargeIcon(strTaskId,
								strTaskType, 2);
						strIcons[2] = goodService.GetTaskLargeIcon(strTaskId,
								strTaskType, 3);
						strIcons[3] = goodService.GetTaskLargeIcon(strTaskId,
								strTaskType, 4);
						strIcons[4] = goodService.GetTaskLargeIcon(strTaskId,
								strTaskType, 5);
						strIcons[5] = goodService.GetTaskLargeIcon(strTaskId,
								strTaskType, 6);
						mbIsLoad = true;
					}
					Message msg = myhandler.obtainMessage();
					Bundle b = new Bundle();
					b.putInt("icontype", 0);
					msg.setData(b);
					msg.what = 5;
					myhandler.sendMessage(msg);
				}
			};

			@Override
			public void onClick(View v) {
				// 启动获取评论数据线程
				Thread thread = new Thread(runicon1);
				thread.start();
			}

		});

		icon2.setOnClickListener(new OnClickListener() {

			Runnable runicon2 = new Runnable() {
				public void run() {
					if (!mbIsLoad) {
						// 获取每张缩小图的放大图片
						strIcons[0] = goodService.GetTaskLargeIcon(strTaskId,
								strTaskType, 1);
						strIcons[1] = goodService.GetTaskLargeIcon(strTaskId,
								strTaskType, 2);
						strIcons[2] = goodService.GetTaskLargeIcon(strTaskId,
								strTaskType, 3);
						strIcons[3] = goodService.GetTaskLargeIcon(strTaskId,
								strTaskType, 4);
						strIcons[4] = goodService.GetTaskLargeIcon(strTaskId,
								strTaskType, 5);
						strIcons[5] = goodService.GetTaskLargeIcon(strTaskId,
								strTaskType, 6);
						mbIsLoad = true;
					}
					Message msg = myhandler.obtainMessage();
					Bundle b = new Bundle();
					b.putInt("icontype", 1);
					msg.setData(b);
					msg.what = 5;
					myhandler.sendMessage(msg);
				}
			};

			@Override
			public void onClick(View v) {
				// 启动获取评论数据线程
				Thread thread = new Thread(runicon2);
				thread.start();
			}

		});

		icon3.setOnClickListener(new OnClickListener() {

			Runnable runicon3 = new Runnable() {
				public void run() {
					if (!mbIsLoad) {
						// 获取每张缩小图的放大图片
						strIcons[0] = goodService.GetTaskLargeIcon(strTaskId,
								strTaskType, 1);
						strIcons[1] = goodService.GetTaskLargeIcon(strTaskId,
								strTaskType, 2);
						strIcons[2] = goodService.GetTaskLargeIcon(strTaskId,
								strTaskType, 3);
						strIcons[3] = goodService.GetTaskLargeIcon(strTaskId,
								strTaskType, 4);
						strIcons[4] = goodService.GetTaskLargeIcon(strTaskId,
								strTaskType, 5);
						strIcons[5] = goodService.GetTaskLargeIcon(strTaskId,
								strTaskType, 6);
						mbIsLoad = true;
					}
					Message msg = myhandler.obtainMessage();
					Bundle b = new Bundle();
					b.putInt("icontype", 2);
					msg.setData(b);
					msg.what = 5;
					myhandler.sendMessage(msg);
				}
			};

			@Override
			public void onClick(View v) {
				// 启动获取评论数据线程
				Thread thread = new Thread(runicon3);
				thread.start();
			}

		});

		icon4.setOnClickListener(new OnClickListener() {
			Runnable runicon4 = new Runnable() {
				public void run() {
					if (!mbIsLoad) {
						// 获取每张缩小图的放大图片
						strIcons[0] = goodService.GetTaskLargeIcon(strTaskId,
								strTaskType, 1);
						strIcons[1] = goodService.GetTaskLargeIcon(strTaskId,
								strTaskType, 2);
						strIcons[2] = goodService.GetTaskLargeIcon(strTaskId,
								strTaskType, 3);
						strIcons[3] = goodService.GetTaskLargeIcon(strTaskId,
								strTaskType, 4);
						strIcons[4] = goodService.GetTaskLargeIcon(strTaskId,
								strTaskType, 5);
						strIcons[5] = goodService.GetTaskLargeIcon(strTaskId,
								strTaskType, 6);
						mbIsLoad = true;
					}
					Message msg = myhandler.obtainMessage();
					Bundle b = new Bundle();
					b.putInt("icontype", 3);
					msg.setData(b);
					msg.what = 5;
					myhandler.sendMessage(msg);
				}
			};

			@Override
			public void onClick(View v) {
				// 启动获取评论数据线程
				Thread thread = new Thread(runicon4);
				thread.start();
			}

		});

		icon5.setOnClickListener(new OnClickListener() {

			Runnable runicon5 = new Runnable() {
				public void run() {
					if (!mbIsLoad) {
						// 获取每张缩小图的放大图片
						strIcons[0] = goodService.GetTaskLargeIcon(strTaskId,
								strTaskType, 1);
						strIcons[1] = goodService.GetTaskLargeIcon(strTaskId,
								strTaskType, 2);
						strIcons[2] = goodService.GetTaskLargeIcon(strTaskId,
								strTaskType, 3);
						strIcons[3] = goodService.GetTaskLargeIcon(strTaskId,
								strTaskType, 4);
						strIcons[4] = goodService.GetTaskLargeIcon(strTaskId,
								strTaskType, 5);
						strIcons[5] = goodService.GetTaskLargeIcon(strTaskId,
								strTaskType, 6);
						mbIsLoad = true;
					}
					Message msg = myhandler.obtainMessage();
					Bundle b = new Bundle();
					b.putInt("icontype", 4);
					msg.setData(b);
					msg.what = 5;
					myhandler.sendMessage(msg);
				}
			};

			@Override
			public void onClick(View v) {
				// 启动获取评论数据线程
				Thread thread = new Thread(runicon5);
				thread.start();
			}

		});

		icon6.setOnClickListener(new OnClickListener() {

			Runnable runicon6 = new Runnable() {
				public void run() {
					if (!mbIsLoad) {
						// 获取每张缩小图的放大图片
						strIcons[0] = goodService.GetTaskLargeIcon(strTaskId,
								strTaskType, 1);
						strIcons[1] = goodService.GetTaskLargeIcon(strTaskId,
								strTaskType, 2);
						strIcons[2] = goodService.GetTaskLargeIcon(strTaskId,
								strTaskType, 3);
						strIcons[3] = goodService.GetTaskLargeIcon(strTaskId,
								strTaskType, 4);
						strIcons[4] = goodService.GetTaskLargeIcon(strTaskId,
								strTaskType, 5);
						strIcons[5] = goodService.GetTaskLargeIcon(strTaskId,
								strTaskType, 6);
						mbIsLoad = true;
					}
					Message msg = myhandler.obtainMessage();
					Bundle b = new Bundle();
					b.putInt("icontype", 5);
					msg.setData(b);
					msg.what = 5;
					myhandler.sendMessage(msg);
				}
			};

			@Override
			public void onClick(View v) {
				// 启动获取评论数据线程
				Thread thread = new Thread(runicon6);
				thread.start();
			}

		});
	}

	class MyHandler extends Handler {
		// 子类必须重写此方法,接受数据
		@Override
		public void handleMessage(Message msg) {
			super.handleMessage(msg);
			switch (msg.what) {
			case 1:
				if (mnRemainTime >= 0) {
					String strTime = mUtils.GetStringBySeconds(mnRemainTime);
					textview3.setText(strTime);
					mnRemainTime -= 1;
					if (mnRemainTime <= 0) {
						button1.setTextColor(Color.rgb(96, 96, 96));
						button1.setEnabled(false);
					}
				} else if (mnRemainTime < 0) {
					mbIsContinue = false;
					textview3.setText("0天0小时0分0秒");
					button1.setTextColor(Color.rgb(96, 96, 96));
					button1.setEnabled(false);
				}
				break;

			case 2:// 判断是否拿下任务
				Bundle b = msg.getData();
				String strMsg = b.getString("strMsg");
				Toast.makeText(TaskDetailActivity.this, strMsg,
						Toast.LENGTH_LONG).show();
				break;
			case 3:
				if (null == mthre/* && mnRemainTime > 0 */) {
					mbIsContinue = true;
					mthre = new Thread(run1);
					mthre.start();
				}
				break;
			case 4:
				if (taskicon != null) {
					if (taskicon.getstrIcon1().length() < 10) {
						icon1.setVisibility(View.GONE);
					} else {
						icon1.setImageBitmap(mUtils.base64ToBitmap(taskicon
								.getstrIcon1()));
					}

					if (taskicon.getstrIcon2().length() < 10) {
						icon2.setVisibility(View.GONE);
					} else {
						icon2.setImageBitmap(mUtils.base64ToBitmap(taskicon
								.getstrIcon2()));
					}

					if (taskicon.getstrIcon3().length() < 10) {
						icon3.setVisibility(View.GONE);
					} else {
						icon3.setImageBitmap(mUtils.base64ToBitmap(taskicon
								.getstrIcon3()));
					}

					if (taskicon.getstrIcon4().length() < 10) {
						icon4.setVisibility(View.GONE);
					} else {
						icon4.setImageBitmap(mUtils.base64ToBitmap(taskicon
								.getstrIcon4()));
					}

					if (taskicon.getstrIcon5().length() < 10) {
						icon5.setVisibility(View.GONE);
					} else {
						icon5.setImageBitmap(mUtils.base64ToBitmap(taskicon
								.getstrIcon5()));
					}

					if (taskicon.getstrIcon6().length() < 10) {
						icon6.setVisibility(View.GONE);
					} else {
						icon6.setImageBitmap(mUtils.base64ToBitmap(taskicon
								.getstrIcon6()));
					}

				} else {
					icon1.setVisibility(View.GONE);
					icon2.setVisibility(View.GONE);
					icon3.setVisibility(View.GONE);
					icon4.setVisibility(View.GONE);
					icon5.setVisibility(View.GONE);
					icon6.setVisibility(View.GONE);
				}
				credittextview.setText("人品:" + mnCredit);
				charmvaluetextview.setText(mnCharmValue + "");
				break;
			case 5:
				Bundle b1 = msg.getData();
				int nPos = b1.getInt("icontype");
				Intent intent = new Intent(TaskDetailActivity.this,
						TaskDetailViewPagerActivity.class);
				intent.putExtra("iconposion", nPos);
				startActivity(intent);
				break;
			case 6:
				if(mnCurrentCredit < mnCreditLimit && 
						mnCurrentCharmValue < mnCharmLimit){
					CommonUtils.ShowToastCenter(TaskDetailActivity.this, "您的人品值不足"+mnCreditLimit+
							"赞值不足"+mnCharmLimit
							, Toast.LENGTH_LONG);
					return;
				}
				//如果人品值不够
				if(mnCurrentCredit < mnCreditLimit){
					CommonUtils.ShowToastCenter(TaskDetailActivity.this, "您的人品值不足"+mnCreditLimit
							, Toast.LENGTH_LONG);
					return;
				}
				//如果人品值不够
				if(mnCurrentCharmValue < mnCharmLimit){
					CommonUtils.ShowToastCenter(TaskDetailActivity.this, "您的赞值不足"+mnCharmLimit
							, Toast.LENGTH_LONG);
					return;
				}
				// 判断当前用户的人品值和赞值是否符合要求
				String strMsg1 = "任务剩余时间";
				strMsg1 += textview3.getText().toString();
				strMsg1 += "，请在剩余时间内完成任务并提交任务结果，否则任务无效！";
				AboutDialog.SetMsg(strMsg1);
				AboutDialog aboutDialog = null;
				if (2 == Integer.parseInt(strTaskType)) {
					aboutDialog = new AboutDialog(TaskDetailActivity.this, 2,
							new PriorityListener() {

								@Override
								public void refreshPriorityUI(String str1,
										String str2, String str3, String str4) {
									int nType = AboutDialog.GetSelectType();
									if (1 == nType) {
										final String strImplementAccountName = msettings
												.getString("TruePersonName", "");

										if (strImplementAccountName.equals("")) {
											Message msg = new Message();
											Bundle b = new Bundle();// 存放数据
											b.putString("strMsg",
													"请先登录再进行相应操作!");
											msg.setData(b);
											msg.what = 2;
											myhandler.sendMessage(msg);
										} else {
											Runnable run11 = new Runnable() {
												public void run() {
													int nSelectTaskRetValue = 0;
													String strPersonName = msettings
															.getString(
																	"TruePersonName",
																	"");
													// 点击了确定按钮,访问服务器,更新数据库表
													nSelectTaskRetValue = goodService
															.SelectTask(
																	strTaskId,
																	strPersonName,
																	strTaskType,
																	strImplementNick);
													String strMsg = "";
													if (1 == nSelectTaskRetValue) {
														strMsg = "操作成功!";
													} else {
														strMsg = "操作失败!";
													}
													Message msg = new Message();
													Bundle b = new Bundle();// 存放数据
													b.putString("strMsg",
															strMsg);
													msg.setData(b);
													msg.what = 2;
													myhandler.sendMessage(msg);
												}
											};
											// 更新动态信息
											Thread thread = new Thread(run11);
											thread.start();
										}
									}
								}

							});
				} else {
					aboutDialog = new AboutDialog(TaskDetailActivity.this, 1,
							new PriorityListener() {

								@Override
								public void refreshPriorityUI(String str1,
										String str2, String str3, String str4) {
									int nType = AboutDialog.GetSelectType();
									if (1 == nType) {
										final String strImplementAccountName = msettings
												.getString("TruePersonName", "");

										if (strImplementAccountName.equals("")) {
											Message msg = new Message();
											Bundle b = new Bundle();// 存放数据
											b.putString("strMsg",
													"请先登录再进行相应操作!");
											msg.setData(b);
											msg.what = 2;
											myhandler.sendMessage(msg);
										} else {
											Runnable run12 = new Runnable() {
												public void run() {
													int nSelectTaskRetValue = 0;
													String strPersonName = msettings
															.getString(
																	"TruePersonName",
																	"");
													// 点击了确定按钮,访问服务器,更新数据库表
													nSelectTaskRetValue = goodService
															.SelectTask(
																	strTaskId,
																	strPersonName,
																	strTaskType,
																	strImplementNick);
													String strMsg = "";
													if (1 == nSelectTaskRetValue) {
														strMsg = "操作成功!";
													} else {
														strMsg = "操作失败!";
													}
													Message msg = new Message();
													Bundle b = new Bundle();// 存放数据
													b.putString("strMsg",
															strMsg);
													msg.setData(b);
													msg.what = 2;
													myhandler.sendMessage(msg);
												}
											};
											// 更新动态信息
											Thread thread = new Thread(run12);
											thread.start();
										}
									}
								}

							});
				}
				aboutDialog.show();
				credittextview.setText("人品:" + mnCredit);
				charmvaluetextview.setText(mnCharmValue + "");
				break;
			}
		}
	}

	// 开始向服务器发送添加数据的请求
	Runnable run1 = new Runnable() {
		public void run() {
			while (mbIsContinue) {
				Message msg = myhandler.obtainMessage();
				msg.what = 1;
				myhandler.sendMessage(msg);
				try {
					Thread.sleep(1000);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}

		}
	};

	// 开始向服务器获取该任务的计时数据
	Runnable run2 = new Runnable() {
		public void run() {
			mnRemainTime = goodService
					.GetTaskRemainTime(strTaskId, strTaskType);
			// 发送消息,启动run1线程
			Message msg = myhandler.obtainMessage();
			msg.what = 3;
			myhandler.sendMessage(msg);
		}
	};

	// 开始向服务器获取任务描述图片
	Runnable run3 = new Runnable() {
		public void run() {
			taskicon = goodService.GetTaskSmallIcon(strTaskId, strTaskType);
			if (!mstrCustomerNameTemp.equals("")) {
				// 根据人名称获取相应的人品值和赞值
				mnCredit = goodService.GetCreditValue(mstrCustomerNameTemp);
				mnCharmValue = goodService.GetCharmValue(mstrCustomerNameTemp);
			}
			// 发送消息,启动run1线程
			Message msg = myhandler.obtainMessage();
			msg.what = 4;
			myhandler.sendMessage(msg);
		}
	};

	public void onDestroy() {
		super.onDestroy();
		mbIsContinue = false;
		mthre = null;
		run1 = null;
	}

	@Override
	public void onBackPressed() {
		mbIsContinue = false;
		mthre = null;
		finish();
	}
}

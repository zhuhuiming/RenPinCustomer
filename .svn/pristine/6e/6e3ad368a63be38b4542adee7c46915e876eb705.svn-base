package com.renpin.renpincustomer;

import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.xmlpull.v1.XmlPullParser;

import com.renpin.domin.DistanceDetail;
import com.renpin.domin.TaskInfo;
import com.renpin.domin.TaskInfoDetail;
import com.renpin.location.MyLocation;
import com.renpin.myservice.UpdateDataService;
import com.renpin.renpincustomer.PullToRefreshView.OnFooterRefreshListener;
import com.renpin.renpincustomer.PullToRefreshView.OnHeaderRefreshListener;
import com.renpin.service.GoodService;
import com.renpin.service.Impl.GoodServiceImpl;
import com.renpin.utils.CommonUtils;
import com.renpin.utils.PollingUtils;
import com.renpin.versionupdate.UpdateInfo;
import com.renpin.versionupdate.UpdateService;

import android.app.AlertDialog;
import android.app.ListActivity;
import android.app.ProgressDialog;
import android.app.AlertDialog.Builder;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Xml;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.SimpleAdapter;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemLongClickListener;

public class RenPinMainActivity extends ListActivity implements
		OnHeaderRefreshListener, OnFooterRefreshListener {

	// 显示动态列表框对象
	private ListView mListView2;
	// 分享
	PullToRefreshView mPullToRefreshView1;
	/** 地球半径（单位：公里） */
	public final static double EARTH_RADIUS_KM = 6378.137;
	// 存储动态信息
	public static List<TaskInfo> mDynamicNew = null;
	// 公共操作类
	private static CommonUtils mUtils = null;
	// 用来存储从数据库中获取到的数据
	// 求助
	static List<HashMap<String, Object>> mListData = null;
	// 我的
	static List<HashMap<String, Object>> mListData1 = null;
	// 分享
	static List<HashMap<String, Object>> mListData2 = null;
	// 求助
	private static TaskInfoListAdpater madapter = null;
	// 我的
	private static DynamicNewsListAdpater madapter1 = null;
	// 分享
	private static TaskInfoListAdpater madapter2 = null;
	// 判断任务数据是否应该刷新
	boolean mbIsFinished = true;
	// 当网络断开了,那么就将这个窗口隐藏
	LinearLayout nonetworklayout = null;
	// 更多操作
	LinearLayout morelayout;
	// 发布操作
	TextView mAnnounceTaskTextView;
	// 定时更新任务数据的线程对象
	private static Thread mthre = null;
	// 判断更新任务线程是否应该停止
	private boolean mbIsRunning = true;
	// 接收消息对象
	MyHandler myhandler = null;
	// 用来获取服务器上数据的对象
	private GoodService goodService = new GoodServiceImpl();
	// 窗口显示1表示我的,2表示求助,3表示分享,4表示更多
	public static int mIsShowingWindow = 3;
	// 用来存储用户信息
	SharedPreferences msettings = null;
	// 当前用户名称
	private String mCurrentPersonName = null;
	// 当前用户昵称
	private String mCurrentPersonNameTemp = null;

	private TextView tasktextview;
	// 发布人图片
	public static Bitmap mAnnounceImage;
	// 获取当前经纬度的类
	private MyLocation mMyLocation = null;
	// 显示动态信息条数的控件对象
	private TextView textview6;
	// 动态控件对象
	private LinearLayout linearlayout1;
	// 分享控件对象
	private LinearLayout linearlayout7;
	// 附近顶端控件对象
	private LinearLayout linearlayout2;
	// 动态顶端控件对象
	private LinearLayout linearlayout3;
	// 求助控件对象
	private LinearLayout linearlayout4;
	// 状态提示信息
	private String strStatusInfo = "";
	// 任务进度状态
	private String strTaskStatus = "";
	// 更多界面
	LinearLayout linearlayout5;
	// 更多顶部界面
	LinearLayout linearlayout6;
	// 用户名称控件
	TextView my_textview1;
	// 用户图标控件
	ImageView my_imageview1;
	// 赞图标控件
	ImageView my_imageview2;
	// 人品值控件
	TextView my_textview2;
	// 赞值控件
	TextView my_textview3;
	// 计数器，保证程序刚刚启动时刷新数据
	public static boolean bIsFirstStart = true;
	// 判断网络连接状态
	private static boolean bNetWorkLinkStatus = true;
	// listview容量值
	private final static int mnVolume = 10;
	// 一次加载
	private final static int nMaxDataLine = 10;
	// 求助任务当前加载最旧的任务数据id号
	private static int mnHelpTaskMaxOldIndex = 0;
	// 求助任务当前刷新到最新任务数据的id号
	private static int mnHelpTaskMaxNewIndex = 0;
	// 存储求助任务数据
	public static List<TaskInfoDetail> mHelpTaskData = null;

	// 分享任务当前加载最旧的数据索引号
	private static int mnShareTaskMaxOldIndex = 0;
	// 分享任务当前刷新到最新任务数据的id号
	private static int mnShareTaskMaxNewIndex = 0;
	// 存储分享任务数据
	public static List<TaskInfoDetail> mShareTaskData = null;

	private long mlCurTime = 0;
	// 意见反馈控件
	private RelativeLayout advicetextview;
	// 关于我们控件
	private RelativeLayout aboutustextview;
	// 判断是否已经提示更新版本号
	private boolean bIsReminderUpdateApk = false;
	// 版本更新
	private RelativeLayout versionupdaterelative;
	// 版本更新提示信息
	private TextView versionupdateinfotextview;
	public UpdateInfo mupdateinfo = null;
	private static final int TIMEOUT = 10 * 1000;// 超时59.60.9.202:8000
	private static final String strUpdateXmlPath = // "http://192.168.2.2:8080/Apk/download?fileName=update.xml";
	"http://www.meiliangshare.cn:8000/Apk/download?fileName=update.xml";
	public static int localVersion = 1;// 本地安装版本
	// 点击该控件进入用户详细界面
	LinearLayout myinfolinearlayout;
	// 存储求助任务数据(按距离排序)
	public static List<DistanceDetail> mHelpTaskDataDistance = null;
	// 存储分享任务数据(按距离排序)
	public static List<DistanceDetail> mShareTaskDataDistance = null;
	// 求助任务中距离用户最大的数值
	private static int mnMaxDistanceForHelp = 0;
	// 分享中距离用户最大的数值
	private static int mnMaxDistanceForShare = 0;
	// 最大距离(米)
	private static final int mnMaxDistance = 50000000;
	// 进度条对象
	public ProgressDialog m_ProgressDialog = null;
	// 周边按钮
	private Button nearbutton;
	// 广场按钮
	private Button spacebutton;
	// 周边或广场标志,1为周边,2为广场,默认为周边
	private int mnDataType = 1;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		requestWindowFeature(Window.FEATURE_NO_TITLE);

		// 程序启动的时候避免光标处在editview中而弹出输入法窗口
		getWindow().setSoftInputMode(
				WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
		setContentView(R.layout.activity_ren_pin_main);
		// 启动轮询服务器
		PollingUtils.startPollingService(this, 20, UpdateDataService.class,
				UpdateDataService.ACTION);

		// 获取版本号
		PackageInfo packageInfo = null;
		try {
			packageInfo = getApplicationContext().getPackageManager()
					.getPackageInfo(getPackageName(), 0);
		} catch (NameNotFoundException e) {
			e.printStackTrace();
		}
		if (packageInfo != null) {
			localVersion = packageInfo.versionCode;
			// CommonUtils.ShowToastCenter(getApplicationContext(), localVersion
			// + "", Toast.LENGTH_LONG);
		}

		UpdateDataService.bMainProcessExit = false;
		// 初始为没有更新提示，程序一旦监测到新版本,那么就提示，提示完了之后只要用户没有退出就不再提示
		bIsReminderUpdateApk = false;
		// 确保动态中显示数据
		madapter1 = null;
		if (null == mHelpTaskData) {
			mnHelpTaskMaxOldIndex = 0;
			mnHelpTaskMaxNewIndex = 0;
		} else if (mHelpTaskData.size() <= 0) {
			mnHelpTaskMaxOldIndex = 0;
			mnHelpTaskMaxNewIndex = 0;
		}

		if (null == mShareTaskData) {
			mnShareTaskMaxOldIndex = 0;
			mnShareTaskMaxNewIndex = 0;
		} else if (mShareTaskData.size() <= 0) {
			mnShareTaskMaxOldIndex = 0;
			mnShareTaskMaxNewIndex = 0;
		}

		if (null == mHelpTaskDataDistance) {
			mnMaxDistanceForHelp = 0;
		} else if (mHelpTaskDataDistance.size() <= 0) {
			mnMaxDistanceForHelp = 0;
		}

		if (null == mShareTaskDataDistance) {
			mnMaxDistanceForShare = 0;
		} else if (mShareTaskDataDistance.size() <= 0) {
			mnMaxDistanceForShare = 0;
		}

		mPullToRefreshView1 = (PullToRefreshView) findViewById(R.id.main_pull_refresh_view);
		mPullToRefreshView1.setOnHeaderRefreshListener(this);
		mPullToRefreshView1.setOnFooterRefreshListener(this);
		bIsFirstStart = true;
		msettings = getSharedPreferences("MekeSharedPreferences", 0);
		mCurrentPersonNameTemp = msettings.getString("PersonName", "");
		mCurrentPersonName = msettings.getString("TruePersonName", "");
		// 初始化界面控件
		InitActivities();
		// 到服务器中下载update.xml文件,获取里面的信息
		checkVersion();
		// 创建接收消息对象
		myhandler = new MyHandler();
		if (null == mUtils) {
			// 创建公共操作类对象
			mUtils = new CommonUtils(this);
		}
		if (null == mMyLocation) {
			// 开始获取当前经纬度
			mMyLocation = new MyLocation(this);
		}
		SharedPreferences.Editor editor = msettings.edit();
		// 将base64类型的图标保存起来
		editor.putString("CurrentLocationAddress", MyLocation.mStrAddress);
		editor.commit();

		// 启动线程,获取求助和分享数据
		GetHelpOrShareData();
		// 如果此时线程对象还没有创建,那么就创建
		if (null == mthre) {
			mbIsRunning = true;
			mthre = new Thread(run);
			mthre.start();
		}
		// 如果当前为2G/3G环境就显示提示框
		ShowPromptWindow();
	}

	private void ShowPromptWindow() {
		// 手机网络类型
		ConnectivityManager connectMgr = (ConnectivityManager) this
				.getSystemService(Context.CONNECTIVITY_SERVICE);
		NetworkInfo info = connectMgr.getActiveNetworkInfo();
		if (info != null) {
			// 如果手机处于2g或3g环境
			if (info.getType() == ConnectivityManager.TYPE_MOBILE) {
				AlertDialog.Builder dialog = new AlertDialog.Builder(
						RenPinMainActivity.this);
				dialog.setMessage("当前网络为2G/3G环境,使用完后记得退出程序哦!");
				dialog.setTitle("温馨提示");
				dialog.setPositiveButton("确定",
						new DialogInterface.OnClickListener() {
							@Override
							public void onClick(DialogInterface dialog,
									int which) {
								dialog.dismiss();
							}
						});
				dialog.show();
			}
		}
	}

	public void onDestroy() {
		mbIsRunning = false;
		mthre = null;
		if (MyLocation.mLocationClient != null) {
			MyLocation.mLocationClient.stop();
			MyLocation.mLocationClient = null;
		}
		super.onDestroy();

	}

	@Override
	public void onBackPressed() {
		if (System.currentTimeMillis() - mlCurTime < 3000) {
			mbIsRunning = false;
			mthre = null;
			if (MyLocation.mLocationClient != null) {
				MyLocation.mLocationClient.stop();
				MyLocation.mLocationClient = null;
			}
			UpdateDataService.bMainProcessExit = true;
			finish();
		} else {
			CommonUtils.ShowToastCenter(this, "再按一次退出程序", Toast.LENGTH_LONG);
		}
		mlCurTime = System.currentTimeMillis();
	}

	private void GetHelpOrShareData() {
		Runnable rundata = new Runnable() {
			public void run() {
				// 等待程序获取到当前用户经纬度
				while (-1 == MyLocation.mLatitude) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}

				if (mHelpTaskDataDistance != null) {
					// 如果此时求助中没有数据,那么就加载
					if (mHelpTaskDataDistance.size() <= 0) {
						// 一次性更新30条数据
						mHelpTaskDataDistance = goodService.getHelpNearData(
								MyLocation.mLongitude, MyLocation.mLatitude,
								(double) mnMaxDistance);
						if (mHelpTaskDataDistance != null) {
							int nSize = mHelpTaskDataDistance.size();
							if (nSize > 0) {
								int ndistance = 0;
								ndistance = mHelpTaskDataDistance
										.get(nSize - 1).getnDistance();
								// 保存最大距离
								mnMaxDistanceForHelp = ndistance;
							}
						}
					}
				} else {// 此时也更新数据
					mHelpTaskDataDistance = goodService.getHelpNearData(
							MyLocation.mLongitude, MyLocation.mLatitude,
							(double) mnMaxDistance);
					if (mHelpTaskDataDistance != null) {
						int nSize = mHelpTaskDataDistance.size();
						if (nSize > 0) {
							int ndistance = 0;
							ndistance = mHelpTaskDataDistance.get(nSize - 1)
									.getnDistance();
							// 保存最大距离
							mnMaxDistanceForHelp = ndistance;
						}
					}
				}
				if (mShareTaskDataDistance != null) {
					// 如果此时求助中没有数据,那么就加载
					if (mShareTaskDataDistance.size() <= 0) {
						// 一次性更新mnVolume条数据
						mShareTaskDataDistance = goodService.getShareNearData(
								MyLocation.mLongitude, MyLocation.mLatitude,
								(double) mnMaxDistance);
						if (mShareTaskDataDistance != null) {
							int nSize = mShareTaskDataDistance.size();
							if (nSize > 0) {
								int nDistance = 0;
								nDistance = mShareTaskDataDistance.get(
										nSize - 1).getnDistance();
								// 保存最旧的任务id
								mnMaxDistanceForShare = nDistance;
							}
						}
					}
				} else {// 此时也更新数据
					mShareTaskDataDistance = goodService.getShareNearData(
							MyLocation.mLongitude, MyLocation.mLatitude,
							(double) mnMaxDistance);
					if (mShareTaskDataDistance != null) {
						int nSize = mShareTaskDataDistance.size();
						if (nSize > 0) {
							int nDistance = 0;
							nDistance = mShareTaskDataDistance.get(nSize - 1)
									.getnDistance();
							// 保存最旧的任务id
							mnMaxDistanceForShare = nDistance;
						}
					}
				}
				Message msg = myhandler.obtainMessage();
				msg.what = 4;
				myhandler.sendMessage(msg);
			}
		};
		m_ProgressDialog = ProgressDialog.show(RenPinMainActivity.this, "提示",
				"正在加载数据,请等待...", true);
		m_ProgressDialog.setCancelable(true);
		// 启动获取评论数据线程
		Thread thread = new Thread(rundata);
		thread.start();
	}

	Runnable run = new Runnable() {
		public void run() {
			while (mbIsRunning) {
				if (mbIsFinished) {
					// 将刷新标志设为不刷新状态
					mbIsFinished = false;
					// 如果需要更新数据
					if ((1 == UpdateDataService.mShouldUpdate
							.getnUpdateSignal() || bIsFirstStart)
							&& !mCurrentPersonName.equals("")) {
						UpdateDataService.mShouldUpdate.setnUpdateSignal(0);
						// 获取我的显示数据
						mDynamicNew = goodService
								.GetMsgInfoNumNew(mCurrentPersonName);
						bIsFirstStart = false;
					}
					Message msg = myhandler.obtainMessage();
					msg.what = 1;
					myhandler.sendMessage(msg);
					// 每隔1秒刷新一次界面
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
			}
		}
	};

	private void ShowWindow() {
		// 我的
		if (1 == mIsShowingWindow) {
			linearlayout2.setVisibility(View.GONE);
			linearlayout3.setVisibility(View.VISIBLE);
			mPullToRefreshView1.setVisibility(View.GONE);
			mListView2.setVisibility(View.VISIBLE);
			linearlayout5.setVisibility(View.GONE);
			linearlayout6.setVisibility(View.GONE);

		} else if (2 == mIsShowingWindow) {// 求助
			linearlayout2.setVisibility(View.VISIBLE);
			linearlayout3.setVisibility(View.GONE);
			mPullToRefreshView1.setVisibility(View.VISIBLE);
			linearlayout5.setVisibility(View.GONE);
			linearlayout6.setVisibility(View.GONE);
		} else if (3 == mIsShowingWindow) {// 分享
			linearlayout2.setVisibility(View.VISIBLE);
			linearlayout3.setVisibility(View.GONE);

			mPullToRefreshView1.setVisibility(View.VISIBLE);
			linearlayout5.setVisibility(View.GONE);
			linearlayout6.setVisibility(View.GONE);
		} else if (4 == mIsShowingWindow) {// 更多
			linearlayout2.setVisibility(View.GONE);
			linearlayout3.setVisibility(View.GONE);
			mPullToRefreshView1.setVisibility(View.GONE);
			mListView2.setVisibility(View.GONE);
			linearlayout5.setVisibility(View.VISIBLE);
			linearlayout6.setVisibility(View.VISIBLE);
		}
	}

	private void InitActivities() {

		mListView2 = (ListView) findViewById(R.id.ren_pin_listView2);

		nonetworklayout = (LinearLayout) findViewById(R.id.upshowlayout_nonetwork);
		morelayout = (LinearLayout) findViewById(R.id.more_linearlayout);
		mAnnounceTaskTextView = (TextView) findViewById(R.id.renpin_textview1);
		tasktextview = (TextView) findViewById(R.id.customer_login_textviewtask);
		textview6 = (TextView) findViewById(R.id.renpin_textiview6);
		linearlayout1 = (LinearLayout) findViewById(R.id.dynamic_state_layout);
		linearlayout2 = (LinearLayout) findViewById(R.id.ren_pin_linearlayout1);
		linearlayout3 = (LinearLayout) findViewById(R.id.ren_pin_linearlayout2);
		linearlayout4 = (LinearLayout) findViewById(R.id.near_linear_layout);
		linearlayout5 = (LinearLayout) findViewById(R.id.ren_pin_linearlayout3);
		linearlayout6 = (LinearLayout) findViewById(R.id.top_linearlayout2);
		linearlayout7 = (LinearLayout) findViewById(R.id.share_linear_layout);
		advicetextview = (RelativeLayout) findViewById(R.id.renpinmain_advice);
		aboutustextview = (RelativeLayout) findViewById(R.id.renpinmain_aboutus);
		versionupdaterelative = (RelativeLayout) findViewById(R.id.renpinmain_relativelayout);
		versionupdateinfotextview = (TextView) findViewById(R.id.renpinmain_prompttextview);
		versionupdateinfotextview.setText("");
		nearbutton = (Button) findViewById(R.id.renpin_button1);
		spacebutton = (Button) findViewById(R.id.renpin_button2);
		if (1 == mnDataType) {
			nearbutton.setBackgroundColor(Color.rgb(251, 188, 64));
			nearbutton.setTextColor(Color.rgb(255, 255, 255));
			spacebutton.setBackgroundColor(Color.rgb(240, 240, 240));
			spacebutton.setTextColor(Color.rgb(128, 128, 128));
		} else {
			spacebutton.setBackgroundColor(Color.rgb(251, 188, 64));
			spacebutton.setTextColor(Color.rgb(255, 255, 255));
			nearbutton.setBackgroundColor(Color.rgb(240, 240, 240));
			nearbutton.setTextColor(Color.rgb(128, 128, 128));
		}

		if (1 == mIsShowingWindow) {
			// 设置背景色
			linearlayout1.setBackgroundColor(Color.rgb(82, 82, 82));
			linearlayout4.setBackgroundColor(Color.rgb(41, 36, 33));
			linearlayout7.setBackgroundColor(Color.rgb(41, 36, 33));
			morelayout.setBackgroundColor(Color.rgb(41, 36, 33));
		} else if (2 == mIsShowingWindow) {
			linearlayout1.setBackgroundColor(Color.rgb(41, 36, 33));
			linearlayout4.setBackgroundColor(Color.rgb(82, 82, 82));
			linearlayout7.setBackgroundColor(Color.rgb(41, 36, 33));
			morelayout.setBackgroundColor(Color.rgb(41, 36, 33));
		} else if (3 == mIsShowingWindow) {
			linearlayout1.setBackgroundColor(Color.rgb(41, 36, 33));
			linearlayout4.setBackgroundColor(Color.rgb(41, 36, 33));
			linearlayout7.setBackgroundColor(Color.rgb(82, 82, 82));
			morelayout.setBackgroundColor(Color.rgb(41, 36, 33));
		} else if (4 == mIsShowingWindow) {
			linearlayout1.setBackgroundColor(Color.rgb(41, 36, 33));
			linearlayout4.setBackgroundColor(Color.rgb(41, 36, 33));
			linearlayout7.setBackgroundColor(Color.rgb(41, 36, 33));
			morelayout.setBackgroundColor(Color.rgb(82, 82, 82));
		}

		// 更多界面控件
		my_textview1 = (TextView) findViewById(R.id.more_opera_Accounttextview1);
		my_imageview1 = (ImageView) findViewById(R.id.more_opera_imageview1);
		my_textview2 = (TextView) findViewById(R.id.more_opera_credittextview2);
		my_textview3 = (TextView) findViewById(R.id.more_opera_charmtextview3);
		my_imageview2 = (ImageView) findViewById(R.id.more_opera_imageview2);

		// int nCreditValue = msettings.getInt("CreditValue", -1);
		// int nCharmValue = msettings.getInt("CharmValue", -1);
		if (mCurrentPersonName.equals("")) {
			my_textview1.setText("点击登录");
			my_textview1.setTextColor(Color.rgb(0, 135, 255));
			my_imageview2.setImageBitmap(null);
		} else {
			my_textview1.setTextColor(Color.rgb(0, 0, 0));
			my_textview1.setText(mCurrentPersonNameTemp);
			my_textview2.setText("人品:");
			my_textview3.setText("");
			Resources res = getResources();
			Bitmap zanbmp = BitmapFactory.decodeResource(res, R.drawable.zan1);
			my_imageview2.setImageBitmap(zanbmp);

			String strBase64Image = msettings.getString("Base64Image", "");
			if (!strBase64Image.equals("")) {
				CommonUtils utils = new CommonUtils(this);
				Bitmap bmp = utils.base64ToBitmap(strBase64Image);
				my_imageview1.setImageBitmap(bmp);
			} else {
				res = getResources();
				Bitmap bmp = BitmapFactory.decodeResource(res,
						R.drawable.noperson);
				my_imageview1.setImageBitmap(bmp);
			}
		}

		my_textview1.setOnClickListener(new TextView.OnClickListener() {
			@Override
			public void onClick(View v) {
				Intent intent = new Intent(RenPinMainActivity.this,
						LoginActivity.class);
				startActivityForResult(intent, 20);
			}

		});
		// 更多界面结尾
		ShowWindow();
		myinfolinearlayout = (LinearLayout) findViewById(R.id.activity_renpin_myinfolinearlayout);

		morelayout.setOnClickListener(new RelativeLayout.OnClickListener() {

			Runnable run1 = new Runnable() {
				public void run() {
					// 获取用户赞个数
					int nCharm = goodService.GetCharmValue(mCurrentPersonName);
					int nCredit = goodService
							.GetCreditValue(mCurrentPersonName);
					Message msg = myhandler.obtainMessage();
					Bundle b = new Bundle();// 存放数据
					b.putInt("nCharm", nCharm);
					b.putInt("nCredit", nCredit);
					msg.setData(b);
					msg.what = 0;
					myhandler.sendMessage(msg);
				}
			};

			@Override
			public void onClick(View arg0) {
				linearlayout2.setVisibility(View.GONE);
				linearlayout3.setVisibility(View.GONE);
				mPullToRefreshView1.setVisibility(View.GONE);
				mListView2.setVisibility(View.GONE);
				linearlayout5.setVisibility(View.VISIBLE);
				linearlayout6.setVisibility(View.VISIBLE);
				mIsShowingWindow = 4;
				// 设置背景色
				linearlayout1.setBackgroundColor(Color.rgb(41, 36, 33));
				linearlayout4.setBackgroundColor(Color.rgb(41, 36, 33));
				linearlayout7.setBackgroundColor(Color.rgb(41, 36, 33));
				morelayout.setBackgroundColor(Color.rgb(82, 82, 82));
				Thread thread = new Thread(run1);
				thread.start();
			}
		});

		mAnnounceTaskTextView
				.setOnClickListener(new TextView.OnClickListener() {
					@Override
					public void onClick(View v) {
						// 判断是否登录
						String strPersonName = msettings.getString(
								"TruePersonName", "");
						if (strPersonName.equals("")) {
							CommonUtils.ShowToastCenter(
									getApplicationContext(), "请先登录",
									Toast.LENGTH_LONG);
							return;
						}
						Intent intent = new Intent(RenPinMainActivity.this,
								TaskAnnounceActivity.class);
						// 显示我的界面
						startActivity(intent);
					}

				});

		// "我的"listview中选项长按删除
		mListView2.setOnItemLongClickListener(new OnItemLongClickListener() {

			// 删除对话框
			private void dialog(final View view, final int position) {
				AlertDialog.Builder builder = new Builder(
						RenPinMainActivity.this);
				builder.setMessage("确定要删除该项吗?");
				builder.setTitle("提示");
				builder.setPositiveButton("确认",
						new android.content.DialogInterface.OnClickListener() {
							public void onClick(DialogInterface dialog,
									int which) {
								dialog.dismiss();
								//
								// 删除数据库中的数据

							}
						});
				builder.setNegativeButton("取消",
						new android.content.DialogInterface.OnClickListener() {
							@Override
							public void onClick(DialogInterface dialog,
									int which) {
								dialog.dismiss();
							}
						});
				builder.create().show();
			}

			@Override
			public boolean onItemLongClick(AdapterView<?> l, final View v,
					final int position, long arg3) {
				dialog(v, position);
				return true;
			}

		});
		// 点击列表中的某一项
		mListView2.setOnItemClickListener(new OnItemClickListener() {

			String strCustomerName;// 发布用户名称
			String strTaskAnnounceTime;
			String strTimeLimit;
			String strTaskTitle;
			String strDetail;
			String strTaskRunSeconds;
			String strTaskId;
			String strImplementName;// 接收者名称
			String strCustomerNameTemp;// 发布用户昵称
			String strImplementNameTemp;// 接收者昵称
			int nTimeStatus = 1;
			int nImpleStatus = 1;
			int nTaskType = 0;

			int nTaskSelectType;
			int nTaskFinishType;
			int nTaskVerifiType;
			int nTaskAnnounceCommentType;
			int nTaskImplementCommentType;
			// 发布者对执行者的评论
			String strAnnounceComment;
			// 发布者给执行者的图片
			String strAnnounceBase64Image;
			// 执行者对发布者的评论
			String strImpleComment;
			// 执行者给发布者的图片
			String strImpleBase64Image;

			public void onItemClick(AdapterView<?> adapterView, View view,
					int position, long id) {

				ListView listView1 = (ListView) adapterView;
				@SuppressWarnings("unchecked")
				HashMap<String, Object> map = (HashMap<String, Object>) listView1
						.getItemAtPosition(position);

				// 如果该项被点击了,那么就说明这个新状态被用户看到了,需要取消这个状态
				strCustomerName = map.get("customername").toString();
				strTaskAnnounceTime = map.get("TaskAnnounceTime").toString();
				strTimeLimit = map.get("TaskTimeLimit").toString();
				strTaskTitle = map.get("tasktitle").toString();
				strDetail = map.get("TaskDetail").toString();
				mAnnounceImage = (Bitmap) map.get("customericon");
				strTaskRunSeconds = map.get("taskruntime").toString();
				strTaskId = map.get("taskid").toString();
				strImplementName = map.get("taskimplementname").toString();
				strCustomerNameTemp = map.get("customernametemp").toString();
				strImplementNameTemp = map.get("taskimplementnametemp")
						.toString();
				nTimeStatus = Integer.parseInt(map.get("tasktimestatus")
						.toString());
				nImpleStatus = Integer.parseInt(map.get("taskimplestatue")
						.toString());
				nTaskType = Integer.parseInt(map.get("tasktype").toString());

				nTaskSelectType = Integer.parseInt(map.get("nTaskSelectType")
						.toString());
				nTaskFinishType = Integer.parseInt(map.get("nTaskFinishType")
						.toString());
				nTaskVerifiType = Integer.parseInt(map.get("nTaskVerifiType")
						.toString());
				nTaskAnnounceCommentType = Integer.parseInt(map.get(
						"nTaskAnnounceCommentType").toString());
				nTaskImplementCommentType = Integer.parseInt(map.get(
						"nTaskImplementCommentType").toString());
				strAnnounceComment = map.get("strAnnounceComment").toString();
				strAnnounceBase64Image = map.get("strAnnounceBase64Image")
						.toString();
				strImpleComment = map.get("strImpleComment").toString();
				strImpleBase64Image = map.get("strImpleBase64Image").toString();

				String strPersonName = msettings
						.getString("TruePersonName", "");
				if (strPersonName.equals("")) {
					CommonUtils.ShowToastCenter(getApplicationContext(),
							"请先登录", Toast.LENGTH_LONG);
					return;
				}

				// 如果该任务有新提示则将该任务或分享中的红点去掉
				CancleRedHot(strTaskId, nTaskType);

				Intent it = null;
				if (1 == nTaskType) {
					it = new Intent(RenPinMainActivity.this,
							DynamicDetailActivity.class);
				} else if (2 == nTaskType) {
					it = new Intent(RenPinMainActivity.this,
							ShareDynamicDetailActivity.class);
				}

				it.putExtra("com.renpin.RenPinMainActivity.customername",
						strCustomerName);
				it.putExtra("com.renpin.RenPinMainActivity.TaskAnnounceTime",
						strTaskAnnounceTime);

				it.putExtra("com.renpin.RenPinMainActivity.TimeLimit",
						strTimeLimit);
				it.putExtra("com.renpin.RenPinMainActivity.TaskTitle",
						strTaskTitle);
				it.putExtra("com.renpin.RenPinMainActivity.Detail", strDetail);
				it.putExtra("com.renpin.RenPinMainActivity.RunSeconds",
						strTaskRunSeconds);
				it.putExtra("com.renpin.RenPinMainActivity.TaskId", strTaskId);
				it.putExtra("com.renpin.RenPinMainActivity.TaskImplementName",
						strImplementName);
				it.putExtra(
						"com.renpin.RenPinMainActivity.strCustomerNameTemp",
						strCustomerNameTemp);
				it.putExtra(
						"com.renpin.RenPinMainActivity.strImplementNameTemp",
						strImplementNameTemp);
				it.putExtra("com.renpin.RenPinMainActivity.nTimeStatus",
						nTimeStatus);
				it.putExtra("com.renpin.RenPinMainActivity.nTaskImplemeStatus",
						nImpleStatus);

				it.putExtra("com.renpin.RenPinMainActivity.strAnnounceComment",
						strAnnounceComment);
				it.putExtra(
						"com.renpin.RenPinMainActivity.strAnnounceBase64Image",
						strAnnounceBase64Image);
				it.putExtra("com.renpin.RenPinMainActivity.strImpleComment",
						strImpleComment);
				it.putExtra(
						"com.renpin.RenPinMainActivity.strImpleBase64Image",
						strImpleBase64Image);
				it.putExtra("com.renpin.RenPinMainActivity.nTaskType",
						nTaskType);

				// 动态内容
				it.putExtra("com.renpin.RenPinMainActivity.nTaskSelectType",
						nTaskSelectType);
				it.putExtra("com.renpin.RenPinMainActivity.nTaskFinishType",
						nTaskFinishType);
				it.putExtra("com.renpin.RenPinMainActivity.nTaskVerifiType",
						nTaskVerifiType);
				it.putExtra(
						"com.renpin.RenPinMainActivity.nTaskAnnounceCommentType",
						nTaskAnnounceCommentType);
				it.putExtra(
						"com.renpin.RenPinMainActivity.nTaskImplementCommentType",
						nTaskImplementCommentType);

				startActivity(it);
			}
		});

		linearlayout1.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				linearlayout2.setVisibility(View.GONE);
				linearlayout3.setVisibility(View.VISIBLE);
				mPullToRefreshView1.setVisibility(View.GONE);
				mListView2.setVisibility(View.VISIBLE);
				linearlayout5.setVisibility(View.GONE);
				linearlayout6.setVisibility(View.GONE);
				// 设置背景色
				linearlayout1.setBackgroundColor(Color.rgb(82, 82, 82));
				linearlayout4.setBackgroundColor(Color.rgb(41, 36, 33));
				linearlayout7.setBackgroundColor(Color.rgb(41, 36, 33));
				morelayout.setBackgroundColor(Color.rgb(41, 36, 33));
				mIsShowingWindow = 1;
			}

		});

		linearlayout7.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				linearlayout2.setVisibility(View.VISIBLE);
				tasktextview.setText("分享");
				linearlayout3.setVisibility(View.GONE);
				mPullToRefreshView1.setVisibility(View.VISIBLE);
				// 如果是从另外一个窗口切换过来的,那么就要重新设置数据
				if (mIsShowingWindow != 3) {
					ShowShareDataForClick(1);
				} else {
					ShowShareDataForClick(0);
				}
				mListView2.setVisibility(View.GONE);
				linearlayout5.setVisibility(View.GONE);
				linearlayout6.setVisibility(View.GONE);
				// 设置背景色
				linearlayout1.setBackgroundColor(Color.rgb(41, 36, 33));
				linearlayout4.setBackgroundColor(Color.rgb(41, 36, 33));
				linearlayout7.setBackgroundColor(Color.rgb(82, 82, 82));
				morelayout.setBackgroundColor(Color.rgb(41, 36, 33));
				mIsShowingWindow = 3;
			}

		});

		linearlayout4.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				linearlayout2.setVisibility(View.VISIBLE);
				tasktextview.setText("求助");
				linearlayout3.setVisibility(View.GONE);
				mPullToRefreshView1.setVisibility(View.VISIBLE);
				// 如果窗口中没有数据,那么就不能进行上拉加载,下拉更新的操作,所以这里在每次点击
				// 的时候都要去自动读数据
				if (mIsShowingWindow != 2) {
					ShowHelpDataForClick(1);
				} else {
					ShowHelpDataForClick(0);
				}
				mListView2.setVisibility(View.GONE);
				linearlayout5.setVisibility(View.GONE);
				linearlayout6.setVisibility(View.GONE);
				// 设置背景色
				linearlayout1.setBackgroundColor(Color.rgb(41, 36, 33));
				linearlayout4.setBackgroundColor(Color.rgb(82, 82, 82));
				linearlayout7.setBackgroundColor(Color.rgb(41, 36, 33));
				morelayout.setBackgroundColor(Color.rgb(41, 36, 33));
				mIsShowingWindow = 2;
			}

		});

		advicetextview.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// 打开意见反馈界面
				Intent it = new Intent(RenPinMainActivity.this,
						AdviceActivity.class);
				startActivity(it);
			}
		});

		aboutustextview.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// 打开意见反馈界面
				Intent it = new Intent(RenPinMainActivity.this,
						AboutUsActivity.class);
				startActivity(it);
			}
		});

		versionupdaterelative.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				if (mupdateinfo != null) {

					// 如果当前版本比服务器版本低
					if (localVersion < Integer.parseInt(mupdateinfo
							.getVersion())) {
						// 发现新版本，提示用户更新
						AlertDialog.Builder alert = new AlertDialog.Builder(
								RenPinMainActivity.this);
						alert.setTitle("软件升级")
								.setMessage("发现新版本,建议立即更新使用.")
								.setPositiveButton("更新",
										new DialogInterface.OnClickListener() {
											public void onClick(
													DialogInterface dialog,
													int which) {
												// 开启更新服务UpdateService
												// 这里为了把update更好模块化，可以传一些updateService依赖的值
												// 如布局ID，资源ID，动态获取的标题,这里以app_name为例
												Intent updateIntent = new Intent(
														RenPinMainActivity.this,
														UpdateService.class);
												updateIntent
														.putExtra(
																"app_name",
																getResources()
																		.getString(
																				R.string.app_name1));
												startService(updateIntent);
											}
										})
								.setNegativeButton("取消",
										new DialogInterface.OnClickListener() {
											public void onClick(
													DialogInterface dialog,
													int which) {
												dialog.dismiss();
											}
										});
						alert.create().show();
					} else {
						CommonUtils.ShowToastCenter(RenPinMainActivity.this,
								"您当前的版本为最新版本,不需要更新", Toast.LENGTH_LONG);
					}
				}
			}
		});

		myinfolinearlayout.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				String mCurrentPersonName = msettings.getString(
						"TruePersonName", "");
				if (!mCurrentPersonName.equals("")) {
					Intent it = new Intent(RenPinMainActivity.this,
							MyInfoActivity.class);
					startActivityForResult(it, 0);
				} else {
					CommonUtils.ShowToastCenter(getApplicationContext(),
							"请先登录", Toast.LENGTH_LONG);
				}
			}

		});

		nearbutton.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				mnDataType = 1;
				nearbutton.setBackgroundColor(Color.rgb(251, 188, 64));
				nearbutton.setTextColor(Color.rgb(255, 255, 255));
				spacebutton.setBackgroundColor(Color.rgb(240, 240, 240));
				spacebutton.setTextColor(Color.rgb(128, 128, 128));
			}

		});

		spacebutton.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				mnDataType = 2;
				spacebutton.setBackgroundColor(Color.rgb(251, 188, 64));
				spacebutton.setTextColor(Color.rgb(255, 255, 255));
				nearbutton.setBackgroundColor(Color.rgb(240, 240, 240));
				nearbutton.setTextColor(Color.rgb(128, 128, 128));
			}

		});
	}

	@SuppressWarnings("deprecation")
	private void CancleRedHotNew(String strTaskId, int nTaskType) {

		if (mDynamicNew != null) {
			int nCount = mDynamicNew.size();
			for (int i = 0; i < nCount; i++) {
				String strId = mDynamicNew.get(i).getmstrId();
				int nTaskTypeTemp = mDynamicNew.get(i).getmnTaskType();

				boolean b1 = strTaskId.equals(strId);
				if (nTaskTypeTemp == nTaskType) {
					if (b1) {
						int nAnnounceCommentType = mDynamicNew.get(i)
								.getnTaskAnnounceCommentType();
						// 判断是否有更新
						if (2 == nAnnounceCommentType) {

							int nNum = mDynamicNew.get(i).getnDynamicNewsNum();
							if (nNum > 0) {
								mDynamicNew.get(0).setnDynamicNewsNum(nNum - 1);
							}

							if (mDynamicNew.get(0).getnDynamicNewsNum() > 0) {
								textview6.setText(mDynamicNew.get(0)
										.getnDynamicNewsNum() + "");
								textview6.setBackgroundDrawable(getResources()
										.getDrawable(R.drawable.red_oval));
							} else {
								textview6.setText("");
								textview6.setBackgroundDrawable(null);
							}
							if (2 == nAnnounceCommentType) {
								mDynamicNew.get(i).setnTaskAnnounceCommentType(
										3);
							}
						}
					}
				}
			}
		}
	}

	@SuppressWarnings("deprecation")
	private void CancleRedHot(String strTaskId, int nTaskType) {

		if (mDynamicNew != null) {
			int nCount = mDynamicNew.size();
			for (int i = 0; i < nCount; i++) {
				String strId = mDynamicNew.get(i).getmstrId();
				int nTaskTypeTemp = mDynamicNew.get(i).getmnTaskType();

				boolean b1 = strTaskId.equals(strId);
				if (nTaskTypeTemp == nTaskType) {
					if (b1) {
						int nSelectType = mDynamicNew.get(i)
								.getnTaskSelectType();
						int nFinishType = mDynamicNew.get(i)
								.getnTaskFinishType();
						int nVerifiType = mDynamicNew.get(i)
								.getnTaskVerifiType();
						int nAnnounceCommentType = mDynamicNew.get(i)
								.getnTaskAnnounceCommentType();
						int nImpleCommentType = mDynamicNew.get(i)
								.getnTaskImplementCommentType();
						// 判断是否有更新
						if (2 == nSelectType || 2 == nFinishType
								|| 2 == nVerifiType
								|| 2 == nAnnounceCommentType
								|| 2 == nImpleCommentType) {

							int nNum = mDynamicNew.get(i).getnDynamicNewsNum();
							if (nNum > 0) {
								mDynamicNew.get(0).setnDynamicNewsNum(nNum - 1);
							}

							if (mDynamicNew.get(0).getnDynamicNewsNum() > 0) {
								textview6.setText(mDynamicNew.get(0)
										.getnDynamicNewsNum() + "");
								textview6.setBackgroundDrawable(getResources()
										.getDrawable(R.drawable.red_oval));
							} else {
								textview6.setText("");
								textview6.setBackgroundDrawable(null);
							}

							if (2 == nSelectType) {
								mDynamicNew.get(i).setnTaskSelectType(3);
							}
							if (2 == nFinishType) {
								mDynamicNew.get(i).setnTaskFinishType(3);
							}
							if (2 == nVerifiType) {
								mDynamicNew.get(i).setnTaskVerifiType(3);
							}
							if (2 == nAnnounceCommentType) {
								mDynamicNew.get(i).setnTaskAnnounceCommentType(
										3);
							}
							if (2 == nImpleCommentType) {
								mDynamicNew.get(i)
										.setnTaskImplementCommentType(3);
							}
						}
					}
				}
			}
		}
	}

	// 如果nType为0表示不需要重置列表框数据,为1表示需要
	private void ShowHelpDataForClick(final int nType) {
		Runnable rundata = new Runnable() {
			public void run() {
				if (mHelpTaskDataDistance != null) {
					// 如果此时求助中没有数据,那么就加载
					if (mHelpTaskDataDistance.size() <= 0) {
						// 一次性更新mnVolume条数据
						mHelpTaskDataDistance = goodService.getHelpNearData(
								MyLocation.mLongitude, MyLocation.mLatitude,
								(double) mnMaxDistance);
						if (mHelpTaskDataDistance != null) {
							int nSize = mHelpTaskDataDistance.size();
							if (nSize > 0) {
								int ndistance = 0;
								ndistance = mHelpTaskDataDistance
										.get(nSize - 1).getnDistance();
								// 保存最大距离
								mnMaxDistanceForHelp = ndistance;
							}
						}
					}
				} else {// 此时也更新数据
					mHelpTaskDataDistance = goodService.getHelpNearData(
							MyLocation.mLongitude, MyLocation.mLatitude,
							(double) mnMaxDistance);
					if (mHelpTaskDataDistance != null) {
						int nSize = mHelpTaskDataDistance.size();
						if (nSize > 0) {
							int ndistance = 0;
							ndistance = mHelpTaskDataDistance.get(nSize - 1)
									.getnDistance();
							// 保存最大距离
							mnMaxDistanceForHelp = ndistance;
						}
					}
				}

				Message msg = myhandler.obtainMessage();
				Bundle b = new Bundle();// 存放数据
				b.putInt("nType", nType);
				msg.setData(b);
				msg.what = 5;
				myhandler.sendMessage(msg);
			}
		};
		// 启动获取评论数据线程
		Thread thread = new Thread(rundata);
		thread.start();
	}

	private void ShowShareDataForClick(final int nType) {
		Runnable rundata = new Runnable() {
			public void run() {
				if (mShareTaskDataDistance != null) {
					// 如果此时求助中没有数据,那么就加载
					if (mShareTaskDataDistance.size() <= 0) {
						// 一次性更新mnVolume条数据
						mShareTaskDataDistance = goodService.getShareNearData(
								MyLocation.mLongitude, MyLocation.mLatitude,
								(double) mnMaxDistance);
						if (mShareTaskDataDistance != null) {
							int nSize = mShareTaskDataDistance.size();
							if (nSize > 0) {
								int nDistance = 0;
								nDistance = mShareTaskDataDistance.get(
										nSize - 1).getnDistance();
								// 保存最旧的任务id
								mnMaxDistanceForShare = nDistance;
							}
						}
					}
				} else {// 此时也更新数据
					mShareTaskDataDistance = goodService.getShareNearData(
							MyLocation.mLongitude, MyLocation.mLatitude,
							(double) mnMaxDistance);
					if (mShareTaskDataDistance != null) {
						int nSize = mShareTaskDataDistance.size();
						if (nSize > 0) {
							int nDistance = 0;
							nDistance = mShareTaskDataDistance.get(nSize - 1)
									.getnDistance();
							// 保存最旧的任务id
							mnMaxDistanceForShare = nDistance;
						}
					}
				}
				Message msg = myhandler.obtainMessage();
				Bundle b = new Bundle();// 存放数据
				b.putInt("nType", nType);
				msg.setData(b);
				msg.what = 5;
				myhandler.sendMessage(msg);
			}
		};

		// 启动获取评论数据线程
		Thread thread = new Thread(rundata);
		thread.start();
	}

	public boolean isConnectInternet() {

		ConnectivityManager conManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);

		NetworkInfo networkInfo = conManager.getActiveNetworkInfo();

		if (networkInfo != null) { // 这个判断一定要加上，要不然会出错
			return networkInfo.isAvailable();
		}
		return false;
	}

	class MyHandler extends Handler {
		// 子类必须重写此方法,接受数据
		@SuppressWarnings("deprecation")
		@Override
		public void handleMessage(Message msg) {
			super.handleMessage(msg);
			switch (msg.what) {
			case 0:
				Bundle b = msg.getData();
				int nCharmValue = b.getInt("nCharm");
				int nCreditValue = b.getInt("nCredit");
				mCurrentPersonName = msettings.getString("TruePersonName", "");
				mCurrentPersonNameTemp = msettings.getString("PersonName", "");
				if (mCurrentPersonName.equals("")) {
					my_textview1.setText("点击登录");
					my_textview1.setTextColor(Color.rgb(0, 135, 255));
					my_textview2.setText("");
					my_textview3.setText("");
					my_imageview2.setImageBitmap(null);
				} else {
					my_textview1.setTextColor(Color.rgb(0, 0, 0));
					my_textview1.setText(mCurrentPersonNameTemp);

					Resources res = getResources();
					Bitmap zanbmp = BitmapFactory.decodeResource(res,
							R.drawable.zan1);
					my_imageview2.setImageBitmap(zanbmp);

					String strBase64Image = msettings.getString("Base64Image",
							"");
					if (!strBase64Image.equals("")) {
						CommonUtils utils = new CommonUtils(
								RenPinMainActivity.this);
						Bitmap bmp = utils.base64ToBitmap(strBase64Image);
						my_imageview1.setImageBitmap(bmp);
					} else {
						res = getResources();
						Bitmap bmp = BitmapFactory.decodeResource(res,
								R.drawable.noperson);
						my_imageview1.setImageBitmap(bmp);
					}
					Editor editor = msettings.edit();
					editor.putInt("CreditValue", nCreditValue);
					editor.putInt("CharmValue", nCharmValue);
					editor.commit();
					my_textview2.setText("人品:" + nCreditValue);

					my_textview3.setText(nCharmValue + "");
				}
				break;
			case 1:
				if (mDynamicNew != null) {
					int nSize = mDynamicNew.size();
					if (nSize > 0) {
						if (mDynamicNew.get(0).getnDynamicNewsNum() > 0) {
							textview6.setText(mDynamicNew.get(0)
									.getnDynamicNewsNum() + "");
							textview6.setBackgroundDrawable(getResources()
									.getDrawable(R.drawable.red_oval));
						} else {
							textview6.setText("");
							textview6.setBackgroundDrawable(null);
						}
					} else {
						textview6.setText("");
						textview6.setBackgroundDrawable(null);
					}

					nonetworklayout.setVisibility(View.GONE);
					// 动态
					int nCount1 = mDynamicNew.size();

					mListData1 = getListData1(nCount1);
					if (1 == mIsShowingWindow) {
						if (null == madapter1) {
							madapter1 = new DynamicNewsListAdpater(
									RenPinMainActivity.this, mListData1,
									R.layout.dynamic_item, new String[] {
											"customericon", "customername",
											"tasktitle", "TaskAnnounceTime" },
									new int[] { R.id.dynamic_item_imageview1,
											R.id.dynamic_item_textview1,
											R.id.dynamic_item_textview2,
											R.id.dynamic_item_textview3 });
							mListView2.setAdapter(madapter1);
						} else {
							madapter1.mItemList = mListData1;
							madapter1.notifyDataSetChanged();
						}
					}
				}
				if (!isConnectInternet()) {
					nonetworklayout.setVisibility(View.VISIBLE);
					bNetWorkLinkStatus = false;
				} else {
					nonetworklayout.setVisibility(View.GONE);
					// 如果上一次测到是处在断网状态下,那么一旦有网那么默认去刷新数据
					if (!bNetWorkLinkStatus) {
						bIsFirstStart = true;
					}
				}
				// 将刷新标志设为可以刷新
				mbIsFinished = true;
				// 新版本更新提示
				if (!bIsReminderUpdateApk) {
					if (mupdateinfo != null) {
						int nNewVersion = Integer.parseInt(mupdateinfo
								.getVersion());
						// 如果有新版本,那么就提示更新最新版本
						if (localVersion < nNewVersion) {
							// 发现新版本，提示用户更新
							AlertDialog.Builder alert = new AlertDialog.Builder(
									RenPinMainActivity.this);
							alert.setTitle("软件升级")
									.setMessage("发现新版本,建议立即更新使用.")
									.setPositiveButton(
											"更新",
											new DialogInterface.OnClickListener() {
												public void onClick(
														DialogInterface dialog,
														int which) {
													// 开启更新服务UpdateService
													// 这里为了把update更好模块化，可以传一些updateService依赖的值
													// 如布局ID，资源ID，动态获取的标题,这里以app_name为例
													Intent updateIntent = new Intent(
															RenPinMainActivity.this,
															UpdateService.class);
													updateIntent
															.putExtra(
																	"app_name",
																	getResources()
																			.getString(
																					R.string.app_name1));
													startService(updateIntent);
												}
											})
									.setNegativeButton(
											"取消",
											new DialogInterface.OnClickListener() {
												public void onClick(
														DialogInterface dialog,
														int which) {
													dialog.dismiss();
												}
											});
							alert.create().show();
							bIsReminderUpdateApk = true;
							versionupdateinfotextview.setText("有新版本");
						}
					}
				}
				if (mupdateinfo != null) {
					int nNewVersion = Integer
							.parseInt(mupdateinfo.getVersion());
					// 如果在更多种有版本更新提示的文字,同时版本已经更新,那么就将这个提示文字去掉
					if (!versionupdateinfotextview.getText().toString()
							.equals("")
							&& localVersion >= nNewVersion) {
						versionupdateinfotextview.setText("");
					}
				}
				break;
			case 2:// 向上滑动加载
				if (2 == mIsShowingWindow) {// 求助
					if (mHelpTaskDataDistance != null) {
						// 求助
						int nCount = mHelpTaskDataDistance.size();
						mListData = getListData(1, nCount);
						SetHelpAdapter(false);
					}
				} else if (3 == mIsShowingWindow) {// 分享
					if (mShareTaskDataDistance != null) {
						// 分享
						int nCount2 = mShareTaskDataDistance.size();
						mListData2 = getListData(2, nCount2);
						SetShareAdapter(false);
					}
				}
				mPullToRefreshView1.onFooterRefreshComplete();
				break;
			case 3:// 向下滑动刷新
				if (2 == mIsShowingWindow) {// 求助
					if (mHelpTaskDataDistance != null) {
						// 求助
						int nCount = mHelpTaskDataDistance.size();
						mListData = getListData(1, nCount);
						SetHelpAdapter(false);
					}
				} else if (3 == mIsShowingWindow) {// 分享
					if (mShareTaskDataDistance != null) {
						// 分享
						int nCount2 = mShareTaskDataDistance.size();
						mListData2 = getListData(2, nCount2);
						SetShareAdapter(false);
					}
				}
				mPullToRefreshView1.onHeaderRefreshComplete();
				break;
			case 4:// 程序刚启动时刷新
				if (mHelpTaskDataDistance != null) {
					// 求助
					int nCount = mHelpTaskDataDistance.size();
					mListData = getListData(1, nCount);
					if (2 == mIsShowingWindow) {
						SetHelpAdapter(true);
					} else {
						SetHelpAdapter(false);
					}
				}
				if (mShareTaskDataDistance != null) {
					// 分享
					int nCount2 = mShareTaskDataDistance.size();
					mListData2 = getListData(2, nCount2);
					if (3 == mIsShowingWindow) {
						SetShareAdapter(true);
					} else {
						SetShareAdapter(false);
					}
				}
				if (m_ProgressDialog != null) {
					m_ProgressDialog.dismiss();
					m_ProgressDialog = null;
				}
				break;
			case 5:// 窗口切换刷新
				Bundle WindowChangeMsg = msg.getData();
				int nType = WindowChangeMsg.getInt("nType");
				if (2 == mIsShowingWindow) {// 求助
					if (mHelpTaskDataDistance != null) {
						if (0 == nType) {// 如果不是从另外一个窗口切换到求助窗口
							// 求助
							int nCount = mHelpTaskDataDistance.size();
							mListData = getListData(1, nCount);
							SetHelpAdapter(false);
						} else {
							// 求助
							int nCount = mHelpTaskDataDistance.size();
							mListData = getListData(1, nCount);
							SetHelpAdapter(true);
						}
					} else {// 如果没有获取到数据,在窗口切换的时候也应该做相应的切换
						if (0 == nType) {// 如果不是从另外一个窗口切换到求助窗口
							// 求助
							SetHelpAdapter(false);
						} else {
							// 求助
							SetHelpAdapter(true);
						}
					}
				} else if (3 == mIsShowingWindow) {// 分享
					if (mShareTaskDataDistance != null) {
						if (0 == nType) {// 如果不是从另外一个窗口切换到分享窗口
							// 分享
							int nCount2 = mShareTaskDataDistance.size();
							mListData2 = getListData(2, nCount2);
							SetShareAdapter(false);
						} else {
							if (mShareTaskDataDistance != null) {
								// 分享
								int nCount2 = mShareTaskDataDistance.size();
								mListData2 = getListData(2, nCount2);
								SetShareAdapter(true);
							}
						}
					} else {
						if (0 == nType) {// 如果不是从另外一个窗口切换到分享窗口
							// 分享
							SetShareAdapter(false);
						} else {
							// 分享
							SetShareAdapter(true);
						}
					}
				}

				break;
			case 6:
				Bundle b6 = msg.getData();
				int nRet = b6.getInt("nRet");
				String strId = b6.getString("id");
				String strType = b6.getString("type");
				String strMsg1 = "";
				if (0 == nRet) {
					strMsg1 = "操作失败";
				} else if (1 == nRet) {
					strMsg1 = "操作成功";
					// 更新赞的数值
					UpdateTaskOrShareCharmValue(strId, strType);
				} else if (2 == nRet) {
					strMsg1 = "已经赞过";
				} else if (3 == nRet) {
					strMsg1 = "不能给自己赞哦";
				}
				CommonUtils.ShowToastCenter(getBaseContext(), strMsg1,
						Toast.LENGTH_LONG);
				break;
			}
		}
	}

	// 更新赞值
	private void UpdateTaskOrShareCharmValue(String strId, String strType) {
		int nSize = 0;
		if (strType.equals("1") && mHelpTaskDataDistance != null) {
			nSize = mHelpTaskDataDistance.size();
			for (int i = 0; i < nSize; i++) {
				if (mHelpTaskDataDistance.get(i).getmstrId().equals(strId)) {
					int nCharmValue = mHelpTaskDataDistance.get(i)
							.getnTaskCharmValue();
					mHelpTaskDataDistance.get(i).setnTaskCharmValue(
							nCharmValue + 1);
					// 求助
					int nCount = mHelpTaskDataDistance.size();
					mListData = getListData(1, nCount);
					SetHelpAdapter(false);
					break;
				}
			}
		} else if (strType.equals("2") && mShareTaskDataDistance != null) {
			nSize = mShareTaskDataDistance.size();
			for (int i = 0; i < nSize; i++) {
				if (mShareTaskDataDistance.get(i).getmstrId().equals(strId)) {
					int nCharmValue = mShareTaskDataDistance.get(i)
							.getnTaskCharmValue();
					mShareTaskDataDistance.get(i).setnTaskCharmValue(
							nCharmValue + 1);
					// 分享
					int nCount2 = mShareTaskDataDistance.size();
					mListData2 = getListData(2, nCount2);
					SetShareAdapter(false);
					break;
				}
			}
		}
	}

	// 更新浏览量
	public void UpdateTaskOrShareBrowseValue(String strId, String strType) {
		int nSize = 0;
		if (strType.equals("1") && mHelpTaskDataDistance != null) {
			nSize = mHelpTaskDataDistance.size();
			for (int i = 0; i < nSize; i++) {
				if (mHelpTaskDataDistance.get(i).getmstrId().equals(strId)) {
					int nBrowseValue = mHelpTaskDataDistance.get(i)
							.getnBrowseTimes();
					mHelpTaskDataDistance.get(i).setnBrowseTimes(
							nBrowseValue + 1);
					// 求助
					int nCount = mHelpTaskDataDistance.size();
					mListData = getListData(1, nCount);
					SetHelpAdapter(false);
					break;
				}
			}
		} else if (strType.equals("2") && mShareTaskDataDistance != null) {
			nSize = mShareTaskDataDistance.size();
			for (int i = 0; i < nSize; i++) {
				if (mShareTaskDataDistance.get(i).getmstrId().equals(strId)) {
					int nBrowseValue = mShareTaskDataDistance.get(i)
							.getnBrowseTimes();
					mShareTaskDataDistance.get(i).setnBrowseTimes(
							nBrowseValue + 1);
					// 求助
					int nCount = mShareTaskDataDistance.size();
					mListData2 = getListData(2, nCount);
					SetShareAdapter(false);
					break;
				}
			}
		}
	}

	private List<HashMap<String, Object>> getListData(int nType, int nCount) {
		List<HashMap<String, Object>> list = new ArrayList<HashMap<String, Object>>();
		HashMap<String, Object> map = null;

		for (int i = 0; i < nCount; i++) {
			String strRegionName = "";
			String strCustomerIcon = "";
			Bitmap bitmap = null;
			String strCustomerName = "";
			String strTaskTile = "";
			String strTaskId = "";
			double dLongitude = 0;
			double Latidude = 0;
			double distance = 0;
			String strTaskAnnounceTime = "";
			String strTaskTimeLimit = "";
			String strTaskDetail = "";
			String strRunSeconds = "";
			String strTaskImplementName = "";
			String strCustomerNameNick = "";
			String strTaskImplementNick = "";
			int nTaskType = 0;
			int nTaskVerifiType = 0;
			int nTaskSelectType = 0;
			int nCharmValue = 0;// 赞值
			int nCommentNum = 0;// 评论条数
			int nBrowseNum = 0;// 浏览条数

			if (1 == nType) {
				nTaskType = mHelpTaskDataDistance.get(i).getmnTaskType();
				strRegionName = mHelpTaskDataDistance.get(i)
						.getmstrTaskRegion();
				strCustomerIcon = mHelpTaskDataDistance.get(i)
						.getmTaskAskPersonIcon();
				bitmap = mUtils.base64ToBitmap(strCustomerIcon);
				strCustomerName = mHelpTaskDataDistance.get(i)
						.getstrTaskPersonTrueName();
				strTaskTile = mHelpTaskDataDistance.get(i).getmTaskTitle();
				strTaskId = mHelpTaskDataDistance.get(i).getmstrId();
				dLongitude = mHelpTaskDataDistance.get(i).getmdLongitude();
				Latidude = mHelpTaskDataDistance.get(i).getmdLatidude();
				strTaskAnnounceTime = mHelpTaskDataDistance.get(i)
						.getmTaskAnnounceTime();
				strTaskTimeLimit = mHelpTaskDataDistance.get(i).getmTimeLimit();
				strTaskDetail = mHelpTaskDataDistance.get(i).getmTaskDetail();
				strRunSeconds = mHelpTaskDataDistance.get(i).getmRunSeconds();
				strTaskImplementName = mHelpTaskDataDistance.get(i)
						.getstrTaskImplementTrueName();

				strCustomerNameNick = mHelpTaskDataDistance.get(i)
						.getmPersonName();
				strTaskImplementNick = mHelpTaskDataDistance.get(i)
						.getmTaskImplementName();
				nTaskVerifiType = mHelpTaskDataDistance.get(i)
						.getnTaskVerifiType();
				nTaskSelectType = mHelpTaskDataDistance.get(i)
						.getnTaskSelectType();
				nCharmValue = mHelpTaskDataDistance.get(i).getnTaskCharmValue();
				nCommentNum = mHelpTaskDataDistance.get(i)
						.getnCommentRecordNum();
				nBrowseNum = mHelpTaskDataDistance.get(i).getnBrowseTimes();
			} else if (2 == nType) {
				nTaskType = mShareTaskDataDistance.get(i).getmnTaskType();
				strRegionName = mShareTaskDataDistance.get(i)
						.getmstrTaskRegion();
				strCustomerIcon = mShareTaskDataDistance.get(i)
						.getmTaskAskPersonIcon();
				bitmap = mUtils.base64ToBitmap(strCustomerIcon);
				strCustomerName = mShareTaskDataDistance.get(i)
						.getstrTaskPersonTrueName();
				strTaskTile = mShareTaskDataDistance.get(i).getmTaskTitle();
				strTaskId = mShareTaskDataDistance.get(i).getmstrId();
				dLongitude = mShareTaskDataDistance.get(i).getmdLongitude();
				Latidude = mShareTaskDataDistance.get(i).getmdLatidude();
				strTaskAnnounceTime = mShareTaskDataDistance.get(i)
						.getmTaskAnnounceTime();
				strTaskTimeLimit = mShareTaskDataDistance.get(i)
						.getmTimeLimit();
				strTaskDetail = mShareTaskDataDistance.get(i).getmTaskDetail();
				strRunSeconds = mShareTaskDataDistance.get(i).getmRunSeconds();
				strTaskImplementName = mShareTaskDataDistance.get(i)
						.getstrTaskImplementTrueName();
				strCustomerNameNick = mShareTaskDataDistance.get(i)
						.getmPersonName();
				strTaskImplementNick = mShareTaskDataDistance.get(i)
						.getmTaskImplementName();
				nTaskVerifiType = mShareTaskDataDistance.get(i)
						.getnTaskVerifiType();
				nTaskSelectType = mShareTaskDataDistance.get(i)
						.getnTaskSelectType();
				nCharmValue = mShareTaskDataDistance.get(i)
						.getnTaskCharmValue();
				nCommentNum = mShareTaskDataDistance.get(i)
						.getnCommentRecordNum();
				nBrowseNum = mShareTaskDataDistance.get(i).getnBrowseTimes();
			}

			String strDistance = ""; // 计算人离任务发布区域的距离
			if (MyLocation.mLatitude != -1) {
				distance = getDistance(dLongitude, Latidude,
						MyLocation.mLongitude, MyLocation.mLatitude); // 如果不足1km
				if (distance < 1) { // 如果不足100m
					if (distance * 1000 < 100) {
						strDistance = "< 100 m";
					} else {
						strDistance = (int) (distance * 1000) + "m";
					}

				} else {
					strDistance = (int) distance + "km";
				}
			}
			// 将获取到的数据存储到容器中
			map = new HashMap<String, Object>();
			map.put("regionname", strRegionName);
			map.put("customericon", bitmap);
			map.put("customername", strCustomerName);
			map.put("tasktitle", strTaskTile);
			map.put("taskid", strTaskId);
			map.put("distance", strDistance);
			map.put("TaskAnnounceTime", strTaskAnnounceTime);
			map.put("TaskTimeLimit", strTaskTimeLimit);
			map.put("TaskDetail", strTaskDetail);
			map.put("taskruntime", strRunSeconds);
			map.put("taskimplementname", strTaskImplementName);
			map.put("customernick", strCustomerNameNick);
			map.put("taskimplementnick", strTaskImplementNick);
			map.put("tasktype", nTaskType + "");
			map.put("nTaskVerifiType", nTaskVerifiType + "");
			map.put("nTaskSelectType", nTaskSelectType + "");
			map.put("nCharmValue", nCharmValue + "");
			map.put("nCommentNum", nCommentNum + "");
			map.put("nBrowseNum", nBrowseNum + "");
			list.add(map);
		}
		return list;
	}

	private List<HashMap<String, Object>> getListData1(int nCount) {
		List<HashMap<String, Object>> list = new ArrayList<HashMap<String, Object>>();
		HashMap<String, Object> map = null;

		for (int i = 0; i < nCount; i++) {
			String strRegionName;
			String strCustomerIcon;
			Bitmap bitmap;
			String strCustomerName;
			String strTaskTile;
			String strTaskId;
			double dLongitude = 0;
			double Latidude = 0;
			double distance = 0;
			String strTaskAnnounceTime;
			String strTaskTimeLimit;
			String strTaskDetail;
			String strRunSeconds;
			String strTaskImplementName;
			String strCustomerNameTemp;
			String strImplementNameTemp;
			int nTimeStatus = 1;
			int nImpleStatus = 1;
			int nTaskType = 0;

			int nTaskSelectType;
			int nTaskFinishType;
			int nTaskVerifiType;
			int nTaskAnnounceCommentType;
			int nTaskImplementCommentType;
			// 发布者对执行者的评论
			String strAnnounceComment;
			// 发布者给执行者的图片
			String strAnnounceBase64Image;
			// 执行者对发布者的评论
			String strImpleComment;
			// 执行者给发布者的图片
			String strImpleBase64Image;

			strTaskId = mDynamicNew.get(i).getmstrId();
			// 判断这条发布信息是否与当前用户有关系
			strRegionName = mDynamicNew.get(i).getmstrTaskRegion();
			strCustomerIcon = mDynamicNew.get(i).getmTaskAskPersonIcon();
			bitmap = mUtils.base64ToBitmap(strCustomerIcon);
			strCustomerName = mDynamicNew.get(i).getstrTaskPersonTrueName();
			strTaskTile = mDynamicNew.get(i).getmTaskTitle();
			dLongitude = mDynamicNew.get(i).getmdLongitude();
			Latidude = mDynamicNew.get(i).getmdLatidude();
			strTaskAnnounceTime = mDynamicNew.get(i).getmTaskAnnounceTime();
			strTaskTimeLimit = mDynamicNew.get(i).getmTimeLimit();
			strTaskDetail = mDynamicNew.get(i).getmTaskDetail();
			strRunSeconds = mDynamicNew.get(i).getmRunSeconds();
			strTaskImplementName = mDynamicNew.get(i)
					.getstrTaskImplementTrueName();
			strCustomerNameTemp = mDynamicNew.get(i).getmPersonName();
			strImplementNameTemp = mDynamicNew.get(i).getmTaskImplementName();
			nTimeStatus = mDynamicNew.get(i).getmnValiableStatus();
			nImpleStatus = mDynamicNew.get(i).getmnImplementStatus();
			nTaskType = mDynamicNew.get(i).getmnTaskType();
			nTaskSelectType = mDynamicNew.get(i).getnTaskSelectType();
			nTaskFinishType = mDynamicNew.get(i).getnTaskFinishType();
			nTaskVerifiType = mDynamicNew.get(i).getnTaskVerifiType();
			nTaskAnnounceCommentType = mDynamicNew.get(i)
					.getnTaskAnnounceCommentType();
			nTaskImplementCommentType = mDynamicNew.get(i)
					.getnTaskImplementCommentType();
			strAnnounceComment = mDynamicNew.get(i)
					.getstrTaskAccountCommentContent();
			strAnnounceBase64Image = mDynamicNew.get(i)
					.getstrTaskAccountImage();
			strImpleComment = mDynamicNew.get(i)
					.getstrTaskImplementCommentContent();
			strImpleBase64Image = mDynamicNew.get(i).getstrTaskImplementImage();

			String strDistance = "";
			// 计算人离任务发布区域的距离
			if (MyLocation.mLatitude != -1) {
				// 如果不足1km
				if (distance <= 1) {
					// 如果不足100m
					if (distance * 1000 < 100) {
						strDistance = "< 100 m";
					} else {
						strDistance = (int) (distance * 1000) + "m";
					}

				} else {
					strDistance = (int) distance + "km";
				}
			}
			// 将获取到的数据存储到容器中
			map = new HashMap<String, Object>();
			map.put("regionname", strRegionName);
			map.put("customericon", bitmap);
			map.put("customername", strCustomerName);
			map.put("tasktitle", strTaskTile);
			map.put("taskid", strTaskId);
			map.put("distance", strDistance);
			map.put("TaskAnnounceTime", strTaskAnnounceTime);
			map.put("TaskTimeLimit", strTaskTimeLimit);
			map.put("TaskDetail", strTaskDetail);
			map.put("taskruntime", strRunSeconds);
			map.put("taskimplementname", strTaskImplementName);
			map.put("customernametemp", strCustomerNameTemp);
			map.put("taskimplementnametemp", strImplementNameTemp);
			map.put("tasktimestatus", nTimeStatus + "");
			map.put("taskimplestatue", nImpleStatus + "");
			map.put("tasktype", nTaskType + "");
			map.put("nTaskSelectType", nTaskSelectType + "");
			map.put("nTaskFinishType", nTaskFinishType + "");
			map.put("nTaskVerifiType", nTaskVerifiType + "");
			map.put("nTaskAnnounceCommentType", nTaskAnnounceCommentType + "");
			map.put("nTaskImplementCommentType", nTaskImplementCommentType + "");
			map.put("strAnnounceComment", strAnnounceComment);
			map.put("strAnnounceBase64Image", strAnnounceBase64Image);
			map.put("strImpleComment", strImpleComment);
			map.put("strImpleBase64Image", strImpleBase64Image);
			list.add(map);
		}
		return list;
	}

	class TaskInfoListAdpater extends SimpleAdapter {

		private LayoutInflater mInflater;
		Context context;
		int count = 0;
		private List<HashMap<String, Object>> mItemList;

		@SuppressWarnings("unchecked")
		public TaskInfoListAdpater(Context context,
				List<? extends HashMap<String, Object>> data, int resource,
				String[] from, int[] to) {
			super(context, data, resource, from, to);
			mInflater = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);
			this.context = context;
			mItemList = (List<HashMap<String, Object>>) data;
			if (data == null) {
				count = 0;
			} else {
				count = data.size();
			}
		}

		public int getCount() {
			return mItemList.size();
		}

		public Object getItem(int pos) {

			return mItemList.get(pos);
		}

		public long getItemId(int pos) {
			return pos;
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			@SuppressWarnings("unchecked")
			Map<String, Object> map = (Map<String, Object>) getItem(position);

			if (null == convertView) {
				convertView = mInflater.inflate(R.layout.help_eachother, null);
			}
			// 发布区域名称
			TextView regionname = (TextView) convertView
					.findViewById(R.id.help_eachother_textview1);
			// 发布区域距离
			TextView regiondistance = (TextView) convertView
					.findViewById(R.id.help_eachother_textview2);
			// 发布人头像
			ImageView imageView = (ImageView) convertView
					.findViewById(R.id.help_eachother_imageview1);
			// 发布人名称
			TextView customername = (TextView) convertView
					.findViewById(R.id.help_eachother_textview3);

			// 发布内容
			TextView detailtext = (TextView) convertView
					.findViewById(R.id.help_eachother_textview4);
			// 任务状态信息
			ImageView imageviewstatus = (ImageView) convertView
					.findViewById(R.id.help_eachother_imageview2);

			// 赞值
			LinearLayout praiselayout = (LinearLayout) convertView
					.findViewById(R.id.help_eachother_zanlayout);
			TextView praisetextview = (TextView) convertView
					.findViewById(R.id.help_eachother_zantextview);
			// 评论条数
			TextView commenttextview = (TextView) convertView
					.findViewById(R.id.help_eachother_commenttextview);
			// 浏览次数
			TextView browsetextview = (TextView) convertView
					.findViewById(R.id.help_eachother_looktextview);

			Bitmap image = (Bitmap) map.get("customericon");
			if (image != null) {
				imageView.setImageBitmap(image);
			} else {
				Resources res = getResources();
				Bitmap bmp = BitmapFactory.decodeResource(res,
						R.drawable.noperson);
				imageView.setImageBitmap(bmp);
			}

			regionname.setText(map.get("regionname").toString());
			regiondistance.setText(map.get("distance").toString());
			customername.setText(" " + map.get("customernick").toString()
					+ ": ");
			detailtext.setText(map.get("tasktitle").toString());

			// 任务发布人名称
			final String strTaskPersonName = map.get("customername").toString();
			final String strId = map.get("taskid").toString();
			final String strType = map.get("tasktype").toString();
			// 添加赞点击响应
			praiselayout.setOnClickListener(new OnClickListener() {
				Runnable zanrun = new Runnable() {
					public void run() {
						int nRet = 0;
						// 先获取当前用户名称
						String strCurName = msettings.getString(
								"TruePersonName", "");
						// 避免自己给自己赞
						if (!strTaskPersonName.equals(strCurName)) {

							nRet = goodService.PraiseToTaskOrShare(strId,
									strCurName, strTaskPersonName, "1");
						} else {
							nRet = 3;// 表示不能给自己赞
						}
						Message msg = myhandler.obtainMessage();
						Bundle b = new Bundle();// 存放数据
						b.putInt("nRet", nRet);
						b.putString("id", strId);
						b.putString("type", strType);
						msg.setData(b);
						msg.what = 6;
						myhandler.sendMessage(msg);
					}
				};

				@Override
				public void onClick(View v) {
					Thread thre = new Thread(zanrun);
					thre.start();
				}
			});

			int nTaskTimeLimit = Integer.parseInt(map.get("TaskTimeLimit")
					.toString());
			int nTaskRunTime = Integer.parseInt(map.get("taskruntime")
					.toString());
			int nTaskVerifiType = Integer.parseInt(map.get("nTaskVerifiType")
					.toString());
			int nTaskSelectType = Integer.parseInt(map.get("nTaskSelectType")
					.toString());
			String strCharmValue = map.get("nCharmValue").toString();
			String strCommentNum = map.get("nCommentNum").toString();
			String strBrowseNum = map.get("nBrowseNum").toString();

			praisetextview.setText(strCharmValue);
			commenttextview.setText(strCommentNum);
			browsetextview.setText(strBrowseNum);
			// 判断该任务的状态
			Resources res = getResources();
			// 如果完成了
			if (2 == nTaskVerifiType || 3 == nTaskVerifiType) {
				Bitmap bmp = BitmapFactory.decodeResource(res,
						R.drawable.sign_finish);
				imageviewstatus.setImageBitmap(bmp);
			} else if (2 == nTaskSelectType || 3 == nTaskSelectType) {// 任务拿下
				Bitmap bmp = BitmapFactory.decodeResource(res,
						R.drawable.sign_ondoing);
				imageviewstatus.setImageBitmap(bmp);
			} else if (nTaskTimeLimit - nTaskRunTime <= 0) {// 过期
				Bitmap bmp = BitmapFactory.decodeResource(res,
						R.drawable.sign_overdue);
				imageviewstatus.setImageBitmap(bmp);
			} else {
				imageviewstatus.setImageBitmap(null);
			}
			return convertView;
		}

	}

	class DynamicNewsListAdpater extends SimpleAdapter {

		private LayoutInflater mInflater;
		Context context;
		int count = 0;
		private List<HashMap<String, Object>> mItemList;

		@SuppressWarnings("unchecked")
		public DynamicNewsListAdpater(Context context,
				List<? extends HashMap<String, Object>> data, int resource,
				String[] from, int[] to) {
			super(context, data, resource, from, to);
			mInflater = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);
			this.context = context;
			mItemList = (List<HashMap<String, Object>>) data;
			if (data == null) {
				count = 0;
			} else {
				count = data.size();
			}
		}

		public int getCount() {
			return mItemList.size();
		}

		public Object getItem(int pos) {

			return mItemList.get(pos);
		}

		public long getItemId(int pos) {
			return pos;
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			@SuppressWarnings("unchecked")
			Map<String, Object> map = (Map<String, Object>) getItem(position);

			if (null == convertView) {
				convertView = mInflater.inflate(R.layout.dynamic_item, null);
			}
			// 发布人头像
			ImageView imageView = (ImageView) convertView
					.findViewById(R.id.dynamic_item_imageview1);

			// 状态图标
			ImageView imageView1 = (ImageView) convertView
					.findViewById(R.id.dynamic_item_imageview2);

			// 发布人名称
			TextView customername = (TextView) convertView
					.findViewById(R.id.dynamic_item_textview1);

			// 发布任务标题
			TextView detailtext = (TextView) convertView
					.findViewById(R.id.dynamic_item_textview2);

			// 任务发布时间
			TextView tasktimetext = (TextView) convertView
					.findViewById(R.id.dynamic_item_textview3);

			// 状态信息
			TextView statustextview = (TextView) convertView
					.findViewById(R.id.dynamic_item_textview4);
			// 任务类型
			TextView strtypetextview = (TextView) convertView
					.findViewById(R.id.dynamic_item_textview5);

			Bitmap image = (Bitmap) map.get("customericon");
			if (image != null) {
				imageView.setImageBitmap(image);
			} else {
				Resources res = getResources();
				Bitmap bmp = BitmapFactory.decodeResource(res,
						R.drawable.noperson);
				imageView.setImageBitmap(bmp);
			}

			mCurrentPersonName = msettings.getString("TruePersonName", "");
			// 判断是否有更新
			if (IsUpdatedNew(Integer.parseInt(map.get("tasktype").toString()),
					map.get("taskid").toString())) {
				Resources res = getResources();
				Bitmap bmp = BitmapFactory.decodeResource(res,
						R.drawable.red_oval);
				imageView1.setImageBitmap(bmp);
				statustextview.setText(strStatusInfo);
			} else {
				statustextview.setText("");
				imageView1.setImageBitmap(null);
			}

			int nTimeLimit = Integer.parseInt(map.get("TaskTimeLimit")
					.toString());
			int nRunTime = Integer.parseInt(map.get("taskruntime").toString());
			String strTaskType = map.get("tasktype").toString();
			int nTaskType = Integer.parseInt(strTaskType);
			// 判断任务是否过期
			if (!IsShowTimeOut(nTaskType, map.get("taskid").toString(),
					mCurrentPersonName, map.get("taskimplementname").toString())
					&& nTimeLimit - nRunTime <= 0) {
				strTaskStatus = "已过期";
				if (2 == Integer.parseInt(map.get("tasktype").toString())) {
					strTaskStatus = "已过期";
				}
			}

			customername.setText(" " + map.get("customernametemp").toString()
					+ ": ");
			detailtext.setText(map.get("tasktitle").toString());

			tasktimetext.setText(strTaskStatus);
			if (1 == nTaskType) {
				strtypetextview.setText("【求助】");
			} else if (2 == nTaskType) {
				strtypetextview.setText("【分享】");
			}
			return convertView;
		}

	}

	private boolean IsShowTimeOut(int nTaskType, String strTaskId,
			String CurrentPersonName, String strImplePersonName) {
		boolean bIsTure = false;
		if (mDynamicNew != null) {
			int nCount = mDynamicNew.size();
			strStatusInfo = "";
			for (int i = 0; i < nCount; i++) {
				String strId = mDynamicNew.get(i).getmstrId();
				String strImpleAccouceName = mDynamicNew.get(i)
						.getstrTaskImplementTrueName();
				int nType = mDynamicNew.get(i).getmnTaskType();

				boolean b1 = strTaskId.equals(strId);
				boolean b3 = !strImpleAccouceName.equals("");
				if (b1 && nType == nTaskType) {
					if (!b3) {
						strTaskStatus = "等待被拿下...";
						if (2 == nTaskType) {
							strTaskStatus = "等待被抢下...";
						}
					} else {
						strTaskStatus = "任务正在执行中";
						if (2 == nTaskType) {
							strTaskStatus = "分享正在执行中";
						}
					}
					if (2 == mDynamicNew.get(i).getnTaskVerifiType()
							|| 3 == mDynamicNew.get(i).getnTaskVerifiType()) {
						strTaskStatus = "已评价，任务结束";
						if (2 == nTaskType) {
							strTaskStatus = "已评价，分享结束";
						}
						bIsTure = true;
					}
					break;
				}
			}
		}
		return bIsTure;
	}

	private boolean IsUpdatedNew(int nTaskType, String strTaskId) {
		boolean bIsTure = false;
		if (mDynamicNew != null) {
			int nCount = mDynamicNew.size();
			strStatusInfo = "";
			for (int i = 0; i < nCount; i++) {
				String strId = mDynamicNew.get(i).getmstrId();
				int nTaskTypeTemp = mDynamicNew.get(i).getmnTaskType();

				boolean b1 = strTaskId.equals(strId);
				if (nTaskTypeTemp == nTaskType) {
					if (b1) {
						if (2 == mDynamicNew.get(i)
								.getnTaskAnnounceCommentType()) {
							strStatusInfo = "有新消息";
							bIsTure = true;
						}
						break;
					}
				}
			}
		}
		return bIsTure;
	}

	private boolean IsUpdated(int nTaskType, String strTaskId,
			String CurrentPersonName, String strImplePersonName) {
		boolean bIsTure = false;
		if (mDynamicNew != null) {
			int nCount = mDynamicNew.size();
			strStatusInfo = "";
			for (int i = 0; i < nCount; i++) {
				String strAccounceName = mDynamicNew.get(i)
						.getstrTaskPersonTrueName();
				String strId = mDynamicNew.get(i).getmstrId();
				String strImpleAccouceName = mDynamicNew.get(i)
						.getstrTaskImplementTrueName();
				int nTaskTypeTemp = mDynamicNew.get(i).getmnTaskType();

				boolean b1 = strTaskId.equals(strId);
				boolean b3 = !strImpleAccouceName.equals("");
				if (nTaskTypeTemp == nTaskType) {
					// 如果这个任务是由当前用户创建的
					if (CurrentPersonName.equals(strAccounceName)) {
						if (b1) {
							if (b3) {
								if (2 == mDynamicNew.get(i)
										.getnTaskSelectType()) {
									if (1 == nTaskType) {
										strStatusInfo += "求助已被拿下";
									}
									if (2 == nTaskType) {
										strStatusInfo += "分享已被抢下";
									}
									bIsTure = true;
								}
								// 这里不考虑任务是因为只有任务发布方给执行方评价,所以这里只有考虑分享
								if (2 == nTaskType) {
									if (2 == mDynamicNew.get(i)
											.getnTaskVerifiType()) {
										strStatusInfo += "对方已评价，分享结束";
										bIsTure = true;
									}
								}

								if (2 == mDynamicNew.get(i)
										.getnTaskImplementCommentType()) {
									strStatusInfo += "有新聊天消息";
									bIsTure = true;
								}
								if (bIsTure) {
									break;
								}
							}
						}
					} else if (CurrentPersonName.equals(strImpleAccouceName)) {// 如果这个任务是由当前用户执行的
						if (b1) {
							if (1 == nTaskType) {
								if (2 == mDynamicNew.get(i)
										.getnTaskVerifiType()) {
									strStatusInfo += "对方已评价，任务结束";
									bIsTure = true;
								}
							}
							if (2 == mDynamicNew.get(i)
									.getnTaskAnnounceCommentType()) {
								strStatusInfo += "有新聊天消息";
								bIsTure = true;
							}
							if (bIsTure) {
								break;
							}

						}
					}
				}
			}
		}
		return bIsTure;
	}

	// 屏幕旋转
	public void onConfigurationChanged(Configuration newConfig) {
		super.onConfigurationChanged(newConfig);
		if (this.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {

		} else if (this.getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
		}
	}

	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		// 可以根据多个请求代码来作相应的操作
		if (20 == resultCode) {
			String PersonName = data.getExtras().getString("personname");
			int nCreditValue = data.getExtras().getInt("CreditValue");
			int nCharmValue = data.getExtras().getInt("CharmValue");
			my_textview1.setText(PersonName);
			my_textview1.setTextColor(Color.rgb(0, 0, 0));
			my_textview2.setText("人品:" + nCreditValue);
			my_textview3.setText("" + nCharmValue);

			Resources res = getResources();
			Bitmap zanbmp = BitmapFactory.decodeResource(res, R.drawable.zan1);
			my_imageview2.setImageBitmap(zanbmp);

			String strBase64Image = msettings.getString("Base64Image", "");
			if (!strBase64Image.equals("")) {
				CommonUtils utils = new CommonUtils(this);
				Bitmap bmp = utils.base64ToBitmap(strBase64Image);
				my_imageview1.setImageBitmap(bmp);
			} else {
				res = getResources();
				Bitmap bmp = BitmapFactory.decodeResource(res,
						R.drawable.noperson);
				my_imageview1.setImageBitmap(bmp);
			}
			// 启动轮询服务器
			PollingUtils.startPollingService(this, 20, UpdateDataService.class,
					UpdateDataService.ACTION);
			// 修改当前用户名称
			mCurrentPersonNameTemp = msettings.getString("PersonName", "");
			mCurrentPersonName = msettings.getString("TruePersonName", "");
			bIsFirstStart = true;
		}
		if (0 == requestCode) {
			if (0 == resultCode) {
				my_textview1.setTextColor(Color.rgb(0, 135, 255));
				my_textview1.setText("点击登录");
				my_textview2.setText("人品:");
				my_textview3.setText("");

				Resources res = getResources();
				res = getResources();
				Bitmap bmp = BitmapFactory.decodeResource(res,
						R.drawable.noperson);
				my_imageview1.setImageBitmap(bmp);
			} else if (1 == resultCode) {
				// 此时有可能修改了头像,这时应该更新头像
				String strBase64Image = msettings.getString("Base64Image", "");
				if (!strBase64Image.equals("")) {
					CommonUtils utils = new CommonUtils(RenPinMainActivity.this);
					Bitmap bmp = utils.base64ToBitmap(strBase64Image);
					my_imageview1.setImageBitmap(bmp);
				} else {
					Resources res = getResources();
					Bitmap bmp = BitmapFactory.decodeResource(res,
							R.drawable.noperson);
					my_imageview1.setImageBitmap(bmp);
				}
			}
		}
		if (1 == requestCode) {
			if (1 == resultCode) {
				String strId = data.getExtras().getString("strTaskId");
				String strtype = data.getExtras().getString("strTaskType");
				UpdateTaskOrShareBrowseValue(strId, strtype);
			}
		}
		super.onActivityResult(requestCode, resultCode, data);
	}

	private double getDistance(double lng1, double lat1, double lng2,
			double lat2) {

		double radLat1 = Math.toRadians(lat1);

		double radLat2 = Math.toRadians(lat2);

		double radLng1 = Math.toRadians(lng1);

		double radLng2 = Math.toRadians(lng2);

		double deltaLat = radLat1 - radLat2;

		double deltaLng = radLng1 - radLng2;

		double distance = 2 * Math.asin(Math.sqrt(Math.pow(

		Math.sin(deltaLat / 2), 2)

		+ Math.cos(radLat1)

		* Math.cos(radLat2)

		* Math.pow(Math.sin(deltaLng / 2), 2)));

		distance = distance * EARTH_RADIUS_KM;

		long nvalue = Math.round(distance * 10000);
		distance = (double) nvalue / 10000;

		return distance;

	}

	@Override
	protected void onListItemClick(ListView l, View v, int position, long id) {
		super.onListItemClick(l, v, position, id);
		String strCustomerNameTemp;// 发布人名称
		String strTaskAnnounceTime;// 发布时间
		String strTimeLimit;// 时间限制
		String strTaskTitle;// 任务标题
		String strDetail;// 任务详细内容
		String strTaskRunSeconds;// 任务执行时间(秒)
		String strTaskId;// 任务id
		String strImplementName;// 任务执行人名称
		String strCustomerNameNick;// 发布人昵称
		String strImplementNick;// 任务执行人昵称
		String strTaskType;// 任务类型
		int nCreditValue = 1;// 限制的人品值
		int nCharmValue = 0;// 限制的赞值

		DistanceDetail task = null;
		if (2 == mIsShowingWindow) {// 如果是在求助窗口
			task = mHelpTaskDataDistance.get(position);
		} else if (3 == mIsShowingWindow) {// 如果是在分享窗口
			task = mShareTaskDataDistance.get(position);
		}
		if (task != null) {
			strCustomerNameTemp = task.getstrTaskPersonTrueName();
			strTaskAnnounceTime = task.getmTaskAnnounceTime();
			strTimeLimit = task.getmTimeLimit();
			strTaskTitle = task.getmTaskTitle();
			strDetail = task.getmTaskDetail();
			mAnnounceImage = mUtils
					.base64ToBitmap(task.getmTaskAskPersonIcon());
			strTaskRunSeconds = task.getmRunSeconds();
			strTaskId = task.getmstrId();
			strImplementName = task.getstrTaskImplementTrueName();
			strCustomerNameNick = task.getmPersonName();
			strImplementNick = task.getmTaskImplementName();
			strTaskType = task.getmnTaskType() + "";
			nCreditValue = task.getnCreditValue();
			nCharmValue = task.getnCharmValue();

			Intent it = new Intent(RenPinMainActivity.this,
					TaskDetailActivity.class);
			it.putExtra("com.renpin.RenPinMainActivity.customername",
					strCustomerNameTemp);
			it.putExtra("com.renpin.RenPinMainActivity.TaskAnnounceTime",
					strTaskAnnounceTime);

			it.putExtra("com.renpin.RenPinMainActivity.TimeLimit", strTimeLimit);
			it.putExtra("com.renpin.RenPinMainActivity.TaskTitle", strTaskTitle);
			it.putExtra("com.renpin.RenPinMainActivity.Detail", strDetail);
			it.putExtra("com.renpin.RenPinMainActivity.RunSeconds",
					strTaskRunSeconds);
			it.putExtra("com.renpin.RenPinMainActivity.TaskId", strTaskId);
			it.putExtra("com.renpin.RenPinMainActivity.TaskImplementName",
					strImplementName);
			it.putExtra("com.renpin.RenPinMainActivity.strCustomerNameNick",
					strCustomerNameNick);
			it.putExtra("com.renpin.RenPinMainActivity.strImplementNick",
					strImplementNick);
			it.putExtra("com.renpin.RenPinMainActivity.strTaskType",
					strTaskType);
			it.putExtra("com.renpin.RenPinMainActivity.nCreditValue",
					nCreditValue);
			it.putExtra("com.renpin.RenPinMainActivity.nCharmValue",
					nCharmValue);

			startActivityForResult(it, 1);
		}
	}

	// 处理刷新到的求助数据
	private void DealUpdateHelpTaskData(List<TaskInfoDetail> data) {
		if (data != null) {
			int nCount = data.size();
			int nSize = mHelpTaskData.size();
			// 判断新加入的数据与老数据总条数是否超过了mnVolume,如果超过了那么就需要清除一些老数据
			if (nCount + nSize > mnVolume) {
				// 组合新的数据
				List<TaskInfoDetail> newdata = new ArrayList<TaskInfoDetail>();
				// 先将最新的数据加入到该容器中
				newdata.addAll(0, data);
				// 判断容器中还能插入几条数据
				int nRemainDatas = mnVolume - nCount;
				int nOldTaskId = 0;
				// 如果还能插入
				if (nRemainDatas > 0) {
					for (int i = 0; i < nRemainDatas; i++) {
						newdata.add(mHelpTaskData.get(i));
					}
					nOldTaskId = Integer.parseInt(mHelpTaskData
							.get(nRemainDatas - 1).getmstrId().toString());
				} else {
					nOldTaskId = Integer.parseInt(data.get(mnVolume - 1)
							.getmstrId().toString());
				}
				// 将mHelpTaskData清空
				mHelpTaskData.clear();
				// 重新将数据赋值到该容器中
				mHelpTaskData.addAll(0, newdata);
				// 修改最旧任务id号
				mnHelpTaskMaxOldIndex = nOldTaskId;
				newdata.removeAll(newdata);
			} else {
				// 组合新的数据
				List<TaskInfoDetail> newdata = new ArrayList<TaskInfoDetail>();
				// 先将最新的数据加入到该容器中
				newdata.addAll(0, data);
				// 将老数据追加到容器后面
				newdata.addAll(data.size(), mHelpTaskData);
				// 将mHelpTaskData清空
				mHelpTaskData.clear();
				// 重新将数据赋值到该容器中
				mHelpTaskData.addAll(0, newdata);
				newdata.removeAll(newdata);
			}
		}
	}

	// 处理刷新到的分享数据
	private void DealUpdateShareTaskData(List<TaskInfoDetail> data) {
		if (data != null) {
			int nCount = data.size();
			int nSize = mShareTaskData.size();
			// 判断新加入的数据与老数据总条数是否超过了mnVolume,如果超过了那么就需要清除一些老数据
			if (nCount + nSize > mnVolume) {
				// 组合新的数据
				List<TaskInfoDetail> newdata = new ArrayList<TaskInfoDetail>();
				// 先将最新的数据加入到该容器中
				newdata.addAll(0, data);
				// 判断容器中还能插入几条数据
				int nRemainDatas = mnVolume - nCount;
				int nOldTaskId = 0;
				// 如果还能插入
				if (nRemainDatas > 0) {
					for (int i = 0; i < nRemainDatas; i++) {
						newdata.add(mShareTaskData.get(i));
					}
					nOldTaskId = Integer.parseInt(mShareTaskData
							.get(nRemainDatas - 1).getmstrId().toString());
				} else {
					nOldTaskId = Integer.parseInt(data.get(mnVolume - 1)
							.getmstrId().toString());
				}
				// 将mHelpTaskData清空
				mShareTaskData.clear();
				// 重新将数据赋值到该容器中
				mShareTaskData.addAll(0, newdata);
				// 修改最旧任务id号
				mnShareTaskMaxOldIndex = nOldTaskId;
				newdata.removeAll(newdata);
			} else {
				// 组合新的数据
				List<TaskInfoDetail> newdata = new ArrayList<TaskInfoDetail>();
				// 先将最新的数据加入到该容器中
				newdata.addAll(0, data);
				// 将老数据追加到容器后面
				newdata.addAll(data.size(), mShareTaskData);
				// 将mHelpTaskData清空
				mShareTaskData.clear();
				// 重新将数据赋值到该容器中
				mShareTaskData.addAll(0, newdata);
				newdata.removeAll(newdata);
			}
		}
	}

	// 处理加载到的求助数据
	private void DealLoadHelpTaskData(List<DistanceDetail> data) {
		int nCount = data.size();
		int nSize = mHelpTaskDataDistance.size();
		int nRemainCount = nCount + nSize - mnVolume;
		// 如果数据条数超过了容器最大容量,那么就要去掉几条最近的数据
		if (nRemainCount > 0) {
			// 去掉nRemainCount条数据
			for (int i = 0; i < nRemainCount; i++) {
				mHelpTaskDataDistance.remove(0);
			}
			mHelpTaskDataDistance.addAll(nSize - nRemainCount, data);
		} else {// 如果数据没有超过最大值
				// 将加载数据添加到容器中
			mHelpTaskDataDistance.addAll(nSize, data);
		}
		/*
		 * int nCount = data.size(); int nSize = mHelpTaskData.size(); int
		 * nRemainCount = nCount + nSize - mnVolume; //
		 * 如果数据条数超过了容器最大容量,那么就要去掉几条最新数据 if (nRemainCount > 0) { //
		 * 去掉nRemainCount条数据 for (int i = 0; i < nRemainCount; i++) {
		 * mHelpTaskData.remove(0); } // 将加载数据添加到容器中 mHelpTaskData.addAll(nSize
		 * - nRemainCount, data); // 修改最新的任务id mnHelpTaskMaxNewIndex =
		 * Integer.parseInt(mHelpTaskData.get(0) .getmstrId()); } else {//
		 * 如果数据没有超过最大值 // 将加载数据添加到容器中 mHelpTaskData.addAll(nSize, data); }
		 */
	}

	// 处理加载到的分享数据
	private void DealLoadShareTaskData(List<DistanceDetail> data) {

		int nCount = data.size();
		int nSize = mShareTaskDataDistance.size();
		int nRemainCount = nCount + nSize - mnVolume;
		// 如果数据条数超过了容器最大容量,那么就要去掉几条最新数据
		if (nRemainCount > 0) {
			// 去掉nRemainCount条数据
			for (int i = 0; i < nRemainCount; i++) {
				mShareTaskDataDistance.remove(0);
			}
			// 将加载数据添加到容器中
			mShareTaskDataDistance.addAll(nSize - nRemainCount, data);
		} else {// 如果数据没有超过最大值
			// 将加载数据添加到容器中
			mShareTaskDataDistance.addAll(nSize, data);
		}
		/*
		 * int nCount = data.size(); int nSize = mShareTaskData.size(); int
		 * nRemainCount = nCount + nSize - mnVolume; //
		 * 如果数据条数超过了容器最大容量,那么就要去掉几条最新数据 if (nRemainCount > 0) { //
		 * 去掉nRemainCount条数据 for (int i = 0; i < nRemainCount; i++) {
		 * mShareTaskData.remove(0); } // 将加载数据添加到容器中
		 * mShareTaskData.addAll(nSize - nRemainCount, data); // 修改最新的任务id
		 * mnShareTaskMaxNewIndex = Integer.parseInt(mShareTaskData.get(0)
		 * .getmstrId()); } else {// 如果数据没有超过最大值 // 将加载数据添加到容器中
		 * mShareTaskData.addAll(nSize, data); }
		 */
	}

	private List<DistanceDetail> DeleteSameDataForHelp(List<DistanceDetail> data) {
		if (data != null) {
			int nSize = data.size();
			for (int i = 0; i < nSize; i++) {
				if (mHelpTaskDataDistance != null) {
					int nSize1 = mHelpTaskDataDistance.size();
					for (int j = 0; j < nSize1; j++) {
						// 如果有相同的数据
						if (data.get(i)
								.getmstrId()
								.equals(mHelpTaskDataDistance.get(j)
										.getmstrId())) {
							// 将相同的数据删除
							data.remove(i);
							i--;
							nSize = data.size();
							break;
						}
					}
				}

			}
		}
		return data;
	}

	private List<DistanceDetail> DeleteSameDataForShare(
			List<DistanceDetail> data) {
		if (data != null) {
			int nSize = data.size();
			for (int i = 0; i < nSize; i++) {
				if (mShareTaskDataDistance != null) {
					int nSize1 = mShareTaskDataDistance.size();
					for (int j = 0; j < nSize1; j++) {
						// 如果有相同的数据
						if (data.get(i)
								.getmstrId()
								.equals(mShareTaskDataDistance.get(j)
										.getmstrId())) {
							// 将相同的数据删除
							data.remove(i);
							i--;
							nSize = data.size();
							break;
						}
					}
				}

			}
		}
		return data;
	}

	@Override
	public void onFooterRefresh(PullToRefreshView view) {
		// 加载
		Runnable rundata = new Runnable() {
			public void run() {
				if (2 == mIsShowingWindow) {
					// 更新mnVolume条数据
					List<DistanceDetail> HelpTaskDataTemp = goodService
							.LoadHelpNearData(MyLocation.mLongitude,
									MyLocation.mLatitude,
									(double) mnMaxDistanceForHelp);
					if (HelpTaskDataTemp != null) {
						int nSize = HelpTaskDataTemp.size();
						// 如果查询到了数据
						if (nSize > 0) {
							int nDistance = 0;
							nDistance = HelpTaskDataTemp.get(nSize - 1)
									.getnDistance();
							// 保存最新旧的任务id
							mnMaxDistanceForHelp = nDistance;
							// 对HelpTaskDataTemp进行去重处理
							HelpTaskDataTemp = DeleteSameDataForHelp(HelpTaskDataTemp);
							// 排序
							DealLoadHelpTaskData(HelpTaskDataTemp);
						}
					}
				} else if (3 == mIsShowingWindow) {// 此时也更新数据
					// 更新mnVolume条数据
					List<DistanceDetail> ShareTaskDataTemp = goodService
							.LoadShareNearData(MyLocation.mLongitude,
									MyLocation.mLatitude,
									(double) mnMaxDistanceForShare);
					if (ShareTaskDataTemp != null) {
						int nSize = ShareTaskDataTemp.size();
						// 如果查询到了数据
						if (nSize > 0) {
							int nDistance = 0;
							nDistance = ShareTaskDataTemp.get(nSize - 1)
									.getnDistance();
							// 保存最新的任务id
							mnMaxDistanceForShare = nDistance;
							ShareTaskDataTemp = DeleteSameDataForShare(ShareTaskDataTemp);
							// 排序
							DealLoadShareTaskData(ShareTaskDataTemp);
						}
					}
				}
				// 发送消息,将数据更新
				Message msg = myhandler.obtainMessage();
				msg.what = 2;
				myhandler.sendMessage(msg);
			}
		};
		// 启动获取评论数据线程
		Thread thread = new Thread(rundata);
		thread.start();
	}

	@Override
	public void onHeaderRefresh(PullToRefreshView view) {
		// 刷新
		Runnable rundata = new Runnable() {
			public void run() {
				if (2 == mIsShowingWindow) {
					// 更新mnVolume条数据
					mHelpTaskDataDistance = goodService.getHelpNearData(
							MyLocation.mLongitude, MyLocation.mLatitude,
							(double) mnMaxDistance);
					if (mHelpTaskDataDistance != null) {
						int nSize = mHelpTaskDataDistance.size();
						// 如果查询到了数据
						if (nSize > 0) {
							int ndistance = 0;
							ndistance = mHelpTaskDataDistance.get(nSize - 1)
									.getnDistance();
							// 保存最大距离
							mnMaxDistanceForHelp = ndistance;
							// 更新listview中的数据,修改相应的数据
							// DealUpdateHelpTaskData(HelpTaskDataTemp);
						}
					}
				} else if (3 == mIsShowingWindow) {// 此时也更新数据
					// 更新mnVolume条数据
					mShareTaskDataDistance = goodService.getShareNearData(
							MyLocation.mLongitude, MyLocation.mLatitude,
							(double) mnMaxDistance);
					if (mShareTaskDataDistance != null) {
						int nSize = mShareTaskDataDistance.size();
						// 如果查询到了数据
						if (nSize > 0) {
							int nDistance = 0;
							nDistance = mShareTaskDataDistance.get(0)
									.getnDistance();
							// 保存最新的任务id
							mnMaxDistanceForShare = nDistance;
							// 更新listview中的数据,修改相应的数据
							// DealUpdateShareTaskData(mShareTaskDataDistance);
						}
					}
				}
				// 发送消息,将数据更新
				Message msg = myhandler.obtainMessage();
				msg.what = 3;
				myhandler.sendMessage(msg);
			}
		};
		// 启动获取评论数据线程
		Thread thread = new Thread(rundata);
		thread.start();
	}

	// 设置求助adapter
	public void SetHelpAdapter(boolean bIsReSet) {
		if (null == madapter) {
			if (mListData != null) {
				madapter = new TaskInfoListAdpater(RenPinMainActivity.this,
						mListData, R.layout.help_eachother, new String[] {
								"regionname", "distance", "customericon",
								"customername", "tasktitle" }, new int[] {
								R.id.help_eachother_textview1,
								R.id.help_eachother_textview2,
								R.id.help_eachother_imageview1,
								R.id.help_eachother_textview3,
								R.id.help_eachother_textview4 });
				setListAdapter(madapter);
			}
		} else {
			if (bIsReSet) {
				setListAdapter(madapter);
			}
			madapter.mItemList = mListData;
			madapter.notifyDataSetChanged();
		}
	}

	// 设置分享adapter
	public void SetShareAdapter(boolean bIsReset) {
		if (null == madapter2) {
			if (mListData2 != null) {
				madapter2 = new TaskInfoListAdpater(RenPinMainActivity.this,
						mListData2, R.layout.help_eachother, new String[] {
								"regionname", "distance", "customericon",
								"customername", "tasktitle" }, new int[] {
								R.id.help_eachother_textview1,
								R.id.help_eachother_textview2,
								R.id.help_eachother_imageview1,
								R.id.help_eachother_textview3,
								R.id.help_eachother_textview4 });
				setListAdapter(madapter2);
			}

		} else {
			if (bIsReset) {
				setListAdapter(madapter2);
			}
			madapter2.mItemList = mListData2;
			madapter2.notifyDataSetChanged();
		}
	}

	/***
	 * 检查是否更新版本
	 */
	public void checkVersion() {
		new Thread(new Runnable() {
			@Override
			public void run() {

				try {
					downloadUpdateXMLFile(strUpdateXmlPath);
					/*
					 * if (downloadSize > 0) { // 获取更新xml文件 Message message =
					 * handler.obtainMessage(); message.what = 1;
					 * handler.sendMessage(message); }
					 */

				} catch (Exception e) {
					/*
					 * Message message = handler.obtainMessage(); message.what =
					 * 2; handler.sendMessage(message);
					 */
				}

			}
		}).start();
	}

	/***
	 * 下载文件
	 * 
	 * @return
	 * @throws MalformedURLException
	 */
	public long downloadUpdateXMLFile(String down_url) throws Exception {
		int totalSize;// 文件总大小
		InputStream inputStream;
		int downloadCount = 0;// 已经下载好的大小
		URL url = new URL(down_url);
		HttpURLConnection httpURLConnection = (HttpURLConnection) url
				.openConnection();
		httpURLConnection.setConnectTimeout(TIMEOUT);
		httpURLConnection.setReadTimeout(TIMEOUT);
		httpURLConnection.setRequestProperty("Accept-Encoding", "identity");
		// 获取下载文件的size
		totalSize = httpURLConnection.getContentLength();
		if (httpURLConnection.getResponseCode() == 404) {
			throw new Exception("fail!");
		}
		inputStream = httpURLConnection.getInputStream();
		mupdateinfo = getUpdataInfo(inputStream);
		/*
		 * byte buffer[] = new byte[1024]; int readsize = 0; while ((readsize =
		 * inputStream.read(buffer)) != -1) { downloadCount += readsize;//
		 * 时时获取下载到的大小 }
		 */
		if (!mupdateinfo.getVersion().equals("")) {
			downloadCount = 1;
		}

		if (httpURLConnection != null) {
			httpURLConnection.disconnect();
		}
		inputStream.close();

		return downloadCount;
	}

	/*
	 * 用pull解析器解析服务器返回的xml文件 (xml封装了版本号)
	 */
	public static UpdateInfo getUpdataInfo(InputStream is) throws Exception {
		XmlPullParser parser = Xml.newPullParser();
		parser.setInput(is, "utf-8");// 设置解析的数据源
		int type = parser.getEventType();
		UpdateInfo info = new UpdateInfo();// 实体
		while (type != XmlPullParser.END_DOCUMENT) {
			switch (type) {
			case XmlPullParser.START_TAG:
				if ("version".equals(parser.getName())) {
					info.setVersion(parser.nextText()); // 获取版本号
				} else if ("url".equals(parser.getName())) {
					info.setUrl(parser.nextText()); // 获取要升级的APK文件
				} else if ("description".equals(parser.getName())) {
					info.setDescription(parser.nextText()); // 获取该文件的信息
				}
				break;
			}
			type = parser.next();
		}
		return info;
	}

	// 更新用户头像
	public static void UpdateAccountPersonImage(String strPersonName,
			String strImage) {
		int nSize = 0;
		// 更新我的中的头像
		if (mDynamicNew != null) {
			nSize = mDynamicNew.size();
			for (int i = 0; i < nSize; i++) {
				// 如果找到了当前用户发布的任务或分享,那么就将他的头像更新
				if (mDynamicNew.get(i).getstrTaskPersonTrueName()
						.equals(strPersonName)) {
					mDynamicNew.get(i).setmTaskAskPersonIcon(strImage);
				}
			}
		}
		// 更新求助中的头像
		if (mHelpTaskDataDistance != null) {
			nSize = mHelpTaskDataDistance.size();
			for (int i = 0; i < nSize; i++) {
				if (mHelpTaskDataDistance.get(i).getstrTaskPersonTrueName()
						.equals(strPersonName)) {
					mHelpTaskDataDistance.get(i)
							.setmTaskAskPersonIcon(strImage);
				}
			}

		}
		// 更新分享中的头像
		if (mShareTaskDataDistance != null) {
			nSize = mShareTaskDataDistance.size();
			for (int i = 0; i < nSize; i++) {
				if (mShareTaskDataDistance.get(i).getstrTaskPersonTrueName()
						.equals(strPersonName)) {
					mShareTaskDataDistance.get(i).setmTaskAskPersonIcon(
							strImage);
				}
			}
		}
	}

}
